{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["vpsOAPWLUTnq","fZzXY9Z9UtEq","lnWjgSKSU_v6","A6vblT6FV9AL","X-EAHwGMae1r","RviCGGxH1kHt","IvhHDW2a4PXj"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Connect to google account"],"metadata":{"id":"vpsOAPWLUTnq"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"kse6YZgdRp-B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724720429231,"user_tz":-540,"elapsed":2136,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"f3f2af08-acd6-472c-f4c4-4c4be91a2248"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/data; to attempt to forcibly remount, call drive.mount(\"/content/data\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/data')"]},{"cell_type":"code","source":["# 코렙 한글깨짐 방지\n","!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf\n","\n","# 데이터 시각화에 사용할 라이브러리\n","import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","import seaborn as sns\n","\n","# 브라우저에서 바로 그려지도록\n","%matplotlib inline\n","\n","# 그래프에 retina display 적용\n","%config InlineBackend.figure_format = 'retina'\n","\n","# Colab 의 한글 폰트 설정\n","plt.rc('font', family='NanumBarunGothic')\n","\n","# 유니코드에서  음수 부호설정\n","mpl.rc('axes', unicode_minus=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iaBj_icIUeBC","executionInfo":{"status":"ok","timestamp":1724720445452,"user_tz":-540,"elapsed":16224,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"1c964168-3e53-4304-d0da-c116ba1c6828"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","fonts-nanum is already the newest version (20200506-1).\n","0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/usr/share/fonts/truetype: skipping, looped directory detected\n","/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n","/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n","/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}]},{"cell_type":"markdown","source":["# Global Variables"],"metadata":{"id":"fZzXY9Z9UtEq"}},{"cell_type":"code","source":["import os\n","import numpy as np\n","import random\n","import torch\n","\n","def reset_seeds(seed=500):\n","  random.seed(seed)\n","  os.environ['PYTHONHASHSEED'] = str(seed)    # 파이썬 환경변수 시드 고정\n","  np.random.seed(seed)\n","  torch.manual_seed(seed) # cpu 연산 무작위 고정\n","  torch.cuda.manual_seed(seed) # gpu 연산 무작위 고정\n","  torch.backends.cudnn.deterministic = True  # cuda 라이브러리에서 Deterministic(결정론적)으로 예측하기 (예측에 대한 불확실성 제거 )"],"metadata":{"id":"k3l5qkpPJpwK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import easydict\n","args = easydict.EasyDict()\n","\n","# path 정보\n","args.default_path = '/content/data/MyDrive/AI_study/1. Machine Learning/3. Supervised Learning/original data/'\n","args.train_csv = args.default_path+'train.csv'\n","args.test_csv = args.default_path+'test.csv'\n","args.default_submission_csv = args.default_path+'submission.csv'\n","\n","args.submission_csv = args.default_path+'result/submission_0827.csv'\n","args.save_results = args.default_path+\"result/model_results.json\"\n","\n","# 데이터 분석을 위한 변수들\n","args.random_state = 50 # 위의 셀에서 고정 시킴\n","args.results = []"],"metadata":{"id":"QmedNTnmUo8H"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Load Tritanic"],"metadata":{"id":"lnWjgSKSU_v6"}},{"cell_type":"markdown","source":["- Surived:0=사망, 1=생존\n","- Pclass: 1=1등석, 2=2등석, 3=3등석\n","- gender:male=남성, female=여성\n","- Age: 나이\n","- SibSp: 타이타닉 호에 동승한 자매/배우자의 수\n","- Parch: 타이타닉 호에 동승한 부모/자식의 수\n","- Ticket: 티켓 번호\n","- Fare: 승객 요금\n","- Cabin: 방 호수\n","- Embarked: 탑승지; C=셰르부르, Q=퀴즈타운, S=사우샘프턴"],"metadata":{"id":"Nzq3WC3XVFYJ"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.style.use('fivethirtyeight')\n","plt.ion()\n","\n","import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"id":"uVs7ZAJOU9yp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ori_train = pd.read_csv(args.train_csv)\n","ori_test = pd.read_csv(args.test_csv)\n","\n","ori_train.shape, ori_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvgiIYX3VVc_","executionInfo":{"status":"ok","timestamp":1724725179894,"user_tz":-540,"elapsed":11,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"065a0efd-a2ce-40d7-cd0d-c3d7b2a6dffc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((916, 12), (393, 11))"]},"metadata":{},"execution_count":291}]},{"cell_type":"code","source":["pd.read_csv(args.default_submission_csv).shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJtJNQalaV9x","executionInfo":{"status":"ok","timestamp":1724725179894,"user_tz":-540,"elapsed":9,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"8bfe152e-0a5e-4b73-85bc-fa8b3bf9d826"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(393, 2)"]},"metadata":{},"execution_count":292}]},{"cell_type":"code","source":["ori_train.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cIUfEFrnVfHg","executionInfo":{"status":"ok","timestamp":1724725179894,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"973ae230-d408-4086-e3a8-337caa9fca36"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['passengerid', 'survived', 'pclass', 'name', 'gender', 'age', 'sibsp',\n","       'parch', 'ticket', 'fare', 'cabin', 'embarked'],\n","      dtype='object')"]},"metadata":{},"execution_count":293}]},{"cell_type":"code","source":["ori_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M7YA99udy6bW","executionInfo":{"status":"ok","timestamp":1724725179894,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"ea447174-c121-4d99-9a16-87a7cf28e297"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived  pclass  \\\n","0            0         0       2   \n","1            1         0       3   \n","2            2         1       1   \n","3            3         1       3   \n","4            4         0       2   \n","\n","                                                name  gender   age  sibsp  \\\n","0                     Wheeler, Mr. Edwin Frederick\"\"    male   NaN      0   \n","1                                 Henry, Miss. Delia  female   NaN      0   \n","2  Hays, Mrs. Charles Melville (Clara Jennings Gr...  female  52.0      1   \n","3       Andersson, Mr. August Edvard (\"Wennerstrom\")    male  27.0      0   \n","4                                  Hold, Mr. Stephen    male  44.0      1   \n","\n","   parch         ticket     fare cabin embarked  \n","0      0  SC/PARIS 2159  12.8750   NaN        S  \n","1      0         382649   7.7500   NaN        Q  \n","2      1          12749  93.5000   B69        S  \n","3      0         350043   7.7958   NaN        S  \n","4      0          26707  26.0000   NaN        S  "],"text/html":["\n","  <div id=\"df-d6619af9-44a6-4622-a640-0396dd1492c6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Wheeler, Mr. Edwin Frederick\"\"</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SC/PARIS 2159</td>\n","      <td>12.8750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Henry, Miss. Delia</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>382649</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n","      <td>female</td>\n","      <td>52.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12749</td>\n","      <td>93.5000</td>\n","      <td>B69</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Andersson, Mr. August Edvard (\"Wennerstrom\")</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>350043</td>\n","      <td>7.7958</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Hold, Mr. Stephen</td>\n","      <td>male</td>\n","      <td>44.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26707</td>\n","      <td>26.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6619af9-44a6-4622-a640-0396dd1492c6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d6619af9-44a6-4622-a640-0396dd1492c6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d6619af9-44a6-4622-a640-0396dd1492c6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f3c10e0e-45af-4fff-b760-60b7986c0d51\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f3c10e0e-45af-4fff-b760-60b7986c0d51')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f3c10e0e-45af-4fff-b760-60b7986c0d51 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_train","summary":"{\n  \"name\": \"ori_train\",\n  \"rows\": 916,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264,\n        \"min\": 0,\n        \"max\": 915,\n        \"num_unique_values\": 916,\n        \"samples\": [\n          380,\n          879,\n          355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 915,\n        \"samples\": [\n          \"Hocking, Mr. Richard George\",\n          \"Collyer, Mr. Harvey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.185627316833022,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          7.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 703,\n        \"samples\": [\n          \"233478\",\n          \"113780\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.506410537600836,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          25.7,\n          7.2292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"B45\",\n          \"B79\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":294}]},{"cell_type":"code","source":["ori_train['passengerid'].nunique(), ori_train.shape[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ySaIXiswVlMR","executionInfo":{"status":"ok","timestamp":1724725179894,"user_tz":-540,"elapsed":5,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"be50f9b3-de61-42de-a9dd-77853c8b6dec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(916, 916)"]},"metadata":{},"execution_count":295}]},{"cell_type":"code","source":["ori_train.drop('passengerid', axis=1, inplace=True)\n","ori_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"No3vTz4AVuFo","executionInfo":{"status":"ok","timestamp":1724725180509,"user_tz":-540,"elapsed":619,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"5388dfea-26c8-4548-b1fe-656d012a1616"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   survived  pclass                                               name  \\\n","0         0       2                     Wheeler, Mr. Edwin Frederick\"\"   \n","1         0       3                                 Henry, Miss. Delia   \n","2         1       1  Hays, Mrs. Charles Melville (Clara Jennings Gr...   \n","3         1       3       Andersson, Mr. August Edvard (\"Wennerstrom\")   \n","4         0       2                                  Hold, Mr. Stephen   \n","\n","   gender   age  sibsp  parch         ticket     fare cabin embarked  \n","0    male   NaN      0      0  SC/PARIS 2159  12.8750   NaN        S  \n","1  female   NaN      0      0         382649   7.7500   NaN        Q  \n","2  female  52.0      1      1          12749  93.5000   B69        S  \n","3    male  27.0      0      0         350043   7.7958   NaN        S  \n","4    male  44.0      1      0          26707  26.0000   NaN        S  "],"text/html":["\n","  <div id=\"df-ca08c815-8557-4d38-bd2b-5861b446f73c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>survived</th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Wheeler, Mr. Edwin Frederick\"\"</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SC/PARIS 2159</td>\n","      <td>12.8750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Henry, Miss. Delia</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>382649</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n","      <td>female</td>\n","      <td>52.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12749</td>\n","      <td>93.5000</td>\n","      <td>B69</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Andersson, Mr. August Edvard (\"Wennerstrom\")</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>350043</td>\n","      <td>7.7958</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Hold, Mr. Stephen</td>\n","      <td>male</td>\n","      <td>44.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26707</td>\n","      <td>26.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca08c815-8557-4d38-bd2b-5861b446f73c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ca08c815-8557-4d38-bd2b-5861b446f73c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ca08c815-8557-4d38-bd2b-5861b446f73c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ab70163d-4a0c-4667-8cf7-9827fa004e6a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab70163d-4a0c-4667-8cf7-9827fa004e6a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ab70163d-4a0c-4667-8cf7-9827fa004e6a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_train","summary":"{\n  \"name\": \"ori_train\",\n  \"rows\": 916,\n  \"fields\": [\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 915,\n        \"samples\": [\n          \"Hocking, Mr. Richard George\",\n          \"Collyer, Mr. Harvey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.185627316833022,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          7.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 703,\n        \"samples\": [\n          \"233478\",\n          \"113780\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.506410537600836,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          25.7,\n          7.2292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"B45\",\n          \"B79\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":296}]},{"cell_type":"code","source":["ori_test.set_index(['passengerid'], inplace=True)\n","print(f'{ori_test.shape}')\n","ori_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xFmCng-XEKi7","executionInfo":{"status":"ok","timestamp":1724725180509,"user_tz":-540,"elapsed":5,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"eed5df91-e8ad-4938-99d8-a0a88ff46855"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(393, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["             pclass                                        name  gender   age  \\\n","passengerid                                                                     \n","916               3                 McGowan, Miss. Anna \"Annie\"  female  15.0   \n","917               2                         Pinsky, Mrs. (Rosa)  female  32.0   \n","918               3           McCarthy, Miss. Catherine Katie\"\"  female   NaN   \n","919               3      Franklin, Mr. Charles (Charles Fardon)    male   NaN   \n","920               1  Wick, Mrs. George Dennick (Mary Hitchcock)  female  45.0   \n","\n","             sibsp  parch              ticket      fare cabin embarked  \n","passengerid                                                             \n","916              0      0              330923    8.0292   NaN        Q  \n","917              0      0              234604   13.0000   NaN        S  \n","918              0      0              383123    7.7500   NaN        Q  \n","919              0      0  SOTON/O.Q. 3101314    7.2500   NaN        S  \n","920              1      1               36928  164.8667   NaN        S  "],"text/html":["\n","  <div id=\"df-a16a2841-21c3-41df-8437-48fed23f2e05\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","    <tr>\n","      <th>passengerid</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>916</th>\n","      <td>3</td>\n","      <td>McGowan, Miss. Anna \"Annie\"</td>\n","      <td>female</td>\n","      <td>15.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330923</td>\n","      <td>8.0292</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>917</th>\n","      <td>2</td>\n","      <td>Pinsky, Mrs. (Rosa)</td>\n","      <td>female</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>234604</td>\n","      <td>13.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>918</th>\n","      <td>3</td>\n","      <td>McCarthy, Miss. Catherine Katie\"\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>383123</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>919</th>\n","      <td>3</td>\n","      <td>Franklin, Mr. Charles (Charles Fardon)</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SOTON/O.Q. 3101314</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>920</th>\n","      <td>1</td>\n","      <td>Wick, Mrs. George Dennick (Mary Hitchcock)</td>\n","      <td>female</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>36928</td>\n","      <td>164.8667</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a16a2841-21c3-41df-8437-48fed23f2e05')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a16a2841-21c3-41df-8437-48fed23f2e05 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a16a2841-21c3-41df-8437-48fed23f2e05');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-773a6e9b-ec43-4c13-97c2-9160a6509782\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-773a6e9b-ec43-4c13-97c2-9160a6509782')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-773a6e9b-ec43-4c13-97c2-9160a6509782 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_test","summary":"{\n  \"name\": \"ori_test\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 393,\n        \"samples\": [\n          \"Spector, Mr. Woolf\",\n          \"Mernagh, Mr. Robert\",\n          \"Kraeff, Mr. Theodor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.955055573706593,\n        \"min\": 0.42,\n        \"max\": 67.0,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          28.0,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 345,\n        \"samples\": [\n          \"2628\",\n          \"C.A. 6212\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.58265418051246,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          32.5,\n          39.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 86,\n        \"samples\": [\n          \"B77\",\n          \"E38\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Q\",\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":297}]},{"cell_type":"markdown","source":["# train_test_split"],"metadata":{"id":"A6vblT6FV9AL"}},{"cell_type":"code","source":["new_survived = pd.Categorical(ori_train[\"survived\"])\n","new_survived = new_survived.rename_categories([\"Died\",\"Survived\"])\n","\n","new_survived.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JjOQ9IMMWPj0","executionInfo":{"status":"ok","timestamp":1724725180939,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"f2a803c7-748d-401a-c5f4-2cde4c9c6f46"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            counts     freqs\n","categories                  \n","Died           570  0.622271\n","Survived       346  0.377729"],"text/html":["\n","  <div id=\"df-5d3433e3-1069-4f8e-aec5-9ee5e988e38d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>counts</th>\n","      <th>freqs</th>\n","    </tr>\n","    <tr>\n","      <th>categories</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Died</th>\n","      <td>570</td>\n","      <td>0.622271</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>346</td>\n","      <td>0.377729</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d3433e3-1069-4f8e-aec5-9ee5e988e38d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5d3433e3-1069-4f8e-aec5-9ee5e988e38d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5d3433e3-1069-4f8e-aec5-9ee5e988e38d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7e1509c7-ad47-454e-9cfd-047bbf703033\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e1509c7-ad47-454e-9cfd-047bbf703033')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7e1509c7-ad47-454e-9cfd-047bbf703033 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"new_survived\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"categories\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Survived\",\n          \"Died\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"counts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 158,\n        \"min\": 346,\n        \"max\": 570,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          346,\n          570\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freqs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1729169421242212,\n        \"min\": 0.3777292576419214,\n        \"max\": 0.6222707423580786,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3777292576419214,\n          0.6222707423580786\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":298}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split"],"metadata":{"id":"koeYL3h2V2Ks"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y = ori_train['survived']\n","X = ori_train.drop(['survived'], axis=1)"],"metadata":{"id":"7PbKWXGgDQ3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reset_seeds()\n","X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.3, stratify=ori_train['survived'])\n","\n","X_tr.shape, X_te.shape, y_tr.shape, y_te.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PKVlYZkjWCWC","executionInfo":{"status":"ok","timestamp":1724725180940,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"1b87fa30-c331-4f26-daf8-8b60fa38a87f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((641, 10), (275, 10), (641,), (275,))"]},"metadata":{},"execution_count":301}]},{"cell_type":"code","source":[],"metadata":{"id":"AlYwj8piNfKz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Base ModelV0"],"metadata":{"id":"rLL_5f3yW1w6"}},{"cell_type":"code","source":["train = X_tr.copy()\n","test = X_te.copy()\n","ori_te = ori_test.copy()\n","\n","train.shape, test.shape, ori_te.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gk5uK32pWxw5","executionInfo":{"status":"ok","timestamp":1724725182720,"user_tz":-540,"elapsed":699,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"9d2c9555-da57-4001-9dbc-056019c84de0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((641, 10), (275, 10), (393, 10))"]},"metadata":{},"execution_count":302}]},{"cell_type":"markdown","source":["## Data Preprocessing"],"metadata":{"id":"if2WMXAMXC9h"}},{"cell_type":"code","source":["train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VAaFr2cnXA1E","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":25,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"894b64a2-7931-41f4-a53e-0912f52ce2c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 641 entries, 582 to 286\n","Data columns (total 10 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   pclass    641 non-null    int64  \n"," 1   name      641 non-null    object \n"," 2   gender    641 non-null    object \n"," 3   age       520 non-null    float64\n"," 4   sibsp     641 non-null    int64  \n"," 5   parch     641 non-null    int64  \n"," 6   ticket    641 non-null    object \n"," 7   fare      641 non-null    float64\n"," 8   cabin     153 non-null    object \n"," 9   embarked  640 non-null    object \n","dtypes: float64(2), int64(3), object(5)\n","memory usage: 55.1+ KB\n"]}]},{"cell_type":"markdown","source":["drop columns"],"metadata":{"id":"vxYO1NrXXMtx"}},{"cell_type":"code","source":["print(f'before: {train.shape} / {test.shape}')\n","drop_cols = ['name', 'ticket', 'cabin']\n","\n","train.drop(drop_cols, axis=1, inplace=True) # 모델이 학습하는데 사용하는 데이터\n","test.drop(drop_cols, axis=1, inplace=True) # 모델의 학습을 평가(잘했는지?? 못했는지??)하기 위한 데이터\n","ori_te.drop(drop_cols, axis=1, inplace=True) # 학습이 잘된 모델을 이용해서 내가 알고 싶은(ori_te) 데이터를 예측하게 하는 것\n","\n","print(f'after: {train.shape} / {test.shape}')\n","train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BMAMzgzhXKEM","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":24,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"938f213f-67fc-4c7a-b853-ecb6b75dc82b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["before: (641, 10) / (275, 10)\n","after: (641, 7) / (275, 7)\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 641 entries, 582 to 286\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   pclass    641 non-null    int64  \n"," 1   gender    641 non-null    object \n"," 2   age       520 non-null    float64\n"," 3   sibsp     641 non-null    int64  \n"," 4   parch     641 non-null    int64  \n"," 5   fare      641 non-null    float64\n"," 6   embarked  640 non-null    object \n","dtypes: float64(2), int64(3), object(2)\n","memory usage: 40.1+ KB\n"]}]},{"cell_type":"markdown","source":["missing value"],"metadata":{"id":"-MC0A5GjXZex"}},{"cell_type":"code","source":["train.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"id":"7Sz-hgEuXV8_","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":22,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"6ff1971b-9e3e-4755-daf2-0f83bc0d9773"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass        0\n","gender        0\n","age         121\n","sibsp         0\n","parch         0\n","fare          0\n","embarked      1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>121</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":305}]},{"cell_type":"code","source":["test.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"id":"vczgi273XfAU","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":20,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"051b1422-53f5-4f27-f209-1e16a37b7fb9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass       0\n","gender       0\n","age         59\n","sibsp        0\n","parch        0\n","fare         0\n","embarked     0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>59</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":306}]},{"cell_type":"code","source":["ori_te.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"id":"zlp5VXiLCLrR","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":19,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"126dd8bb-3d8b-41a2-d55c-cb02137923e5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass       0\n","gender       0\n","age         83\n","sibsp        0\n","parch        0\n","fare         1\n","embarked     1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>83</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":307}]},{"cell_type":"code","source":["age_median = train['age'].median()\n","fare_median = train['fare'].median()\n","embarked_mode = train['embarked'].mode().values[0]\n","\n","age_median, fare_median, embarked_mode"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xzm5OVHLXhAv","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":18,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"9f4d8b31-ed15-4326-92c9-fcdfa16638f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(27.0, 14.5, 'S')"]},"metadata":{},"execution_count":308}]},{"cell_type":"code","source":["train['age'].fillna(age_median, inplace=True)\n","test['age'].fillna(age_median, inplace=True)\n","ori_te['age'].fillna(age_median, inplace=True)\n","\n","train['fare'].fillna(fare_median, inplace=True)\n","test['fare'].fillna(fare_median, inplace=True)\n","ori_te['fare'].fillna(fare_median, inplace=True)\n","\n","train['embarked'].fillna(embarked_mode, inplace=True)\n","test['embarked'].fillna(embarked_mode, inplace=True)\n","ori_te['embarked'].fillna(embarked_mode, inplace=True)\n","\n","train.isnull().sum().sum(), test.isnull().sum().sum(), ori_te.isnull().sum().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zr6q6vb1XqrG","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":16,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"c198f066-ebab-4d0f-961d-e0193cfb9b02"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 0, 0)"]},"metadata":{},"execution_count":309}]},{"cell_type":"markdown","source":["data encoding"],"metadata":{"id":"eUYyVFT4YOLY"}},{"cell_type":"code","source":["from sklearn.preprocessing import OneHotEncoder"],"metadata":{"id":"vxsmYuiZYJ3i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fKxuPwvGz69n","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":14,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"1fbea692-e605-4477-e6be-1bfb10476073"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['pclass', 'gender', 'age', 'sibsp', 'parch', 'fare', 'embarked'], dtype='object')"]},"metadata":{},"execution_count":311}]},{"cell_type":"code","source":["enc_cols = ['gender', 'embarked']\n","normal_cols = list(set(train.columns) - set(enc_cols))\n","normal_cols"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ijwMCjMbYTFE","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":13,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"d6a99f3a-cf97-4261-e6b1-60df3fe05872"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['age', 'parch', 'fare', 'sibsp', 'pclass']"]},"metadata":{},"execution_count":312}]},{"cell_type":"code","source":["print(f'before: {train.shape} / {test.shape}')\n","\n","enc = OneHotEncoder()\n","# train\n","tmp_tr = pd.DataFrame(\n","    enc.fit_transform(train[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_tr = pd.concat(\n","    [train[normal_cols].reset_index(drop=True), tmp_tr.reset_index(drop=True)]\n","    , axis=1\n",")\n","# test\n","tmp_te = pd.DataFrame(\n","    enc.transform(test[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_te = pd.concat(\n","    [test[normal_cols].reset_index(drop=True), tmp_te.reset_index(drop=True)]\n","    , axis=1\n",")\n","# ori_test\n","tmp_te = pd.DataFrame(\n","    enc.transform(ori_te[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_ori_te = pd.concat(\n","    [ori_te[normal_cols].reset_index(drop=True), tmp_te.reset_index(drop=True)]\n","    , axis=1\n",")\n","\n","print(f'after: {enc_tr.shape} / {enc_te.shape}')\n","enc_tr.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":262},"id":"973B2IbhYdWK","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":13,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"f1cc7bc4-93a7-46d0-de4a-7d7b2f21c01c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["before: (641, 7) / (275, 7)\n","after: (641, 10) / (275, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["    age  parch     fare  sibsp  pclass  gender_female  gender_male  \\\n","0  32.0      0   7.9250      0       3            0.0          1.0   \n","1  21.0      0  11.5000      0       2            0.0          1.0   \n","2  27.0      0   7.7750      0       3            0.0          1.0   \n","3  19.0      0   7.8958      0       3            0.0          1.0   \n","4  74.0      0   7.7750      0       3            0.0          1.0   \n","\n","   embarked_C  embarked_Q  embarked_S  \n","0         0.0         0.0         1.0  \n","1         0.0         0.0         1.0  \n","2         0.0         0.0         1.0  \n","3         0.0         0.0         1.0  \n","4         0.0         0.0         1.0  "],"text/html":["\n","  <div id=\"df-aff1997a-b7e7-4953-a6c1-271df2a8ac74\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>parch</th>\n","      <th>fare</th>\n","      <th>sibsp</th>\n","      <th>pclass</th>\n","      <th>gender_female</th>\n","      <th>gender_male</th>\n","      <th>embarked_C</th>\n","      <th>embarked_Q</th>\n","      <th>embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>21.0</td>\n","      <td>0</td>\n","      <td>11.5000</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>7.7750</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>7.8958</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>74.0</td>\n","      <td>0</td>\n","      <td>7.7750</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aff1997a-b7e7-4953-a6c1-271df2a8ac74')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aff1997a-b7e7-4953-a6c1-271df2a8ac74 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aff1997a-b7e7-4953-a6c1-271df2a8ac74');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9270adfd-bdd4-4f45-8d58-c822ff836782\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9270adfd-bdd4-4f45-8d58-c822ff836782')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9270adfd-bdd4-4f45-8d58-c822ff836782 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"enc_tr","summary":"{\n  \"name\": \"enc_tr\",\n  \"rows\": 641,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.853993306253866,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          61.0,\n          32.0,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.6719436759877,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 219,\n        \"samples\": [\n          227.525,\n          18.7875,\n          57.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47667411690645545,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47667411690645545,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4058248855769076,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28029228949562995,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.455626550830999,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":313}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","\n","# Fare 컬럼의 분포를 시각화\n","plt.figure(figsize=(10, 6))\n","sns.histplot(enc_tr['fare'], bins=50, kde=True)\n","plt.title('Distribution of Fare in Titanic Dataset')\n","plt.xlabel('Fare')\n","plt.ylabel('Frequency')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":609},"id":"oAo317YadSER","executionInfo":{"status":"ok","timestamp":1724725938576,"user_tz":-540,"elapsed":2688,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"adbbf8f0-8f16-4892-b3b6-a92ab682863f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"image/png":{"width":959,"height":592}}}]},{"cell_type":"markdown","source":["## Training"],"metadata":{"id":"X-EAHwGMae1r"}},{"cell_type":"code","source":["enc_tr.isnull().sum().sum(), enc_te.isnull().sum().sum(), enc_ori_te.isnull().sum().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TtAqy9dTaMzr","executionInfo":{"status":"ok","timestamp":1724725182721,"user_tz":-540,"elapsed":11,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"ab2892d7-1501-495c-fa06-79cddaf1d749"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 0, 0)"]},"metadata":{},"execution_count":314}]},{"cell_type":"code","source":["enc_tr.shape, enc_te.shape, enc_ori_te.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lyM1TD6fEz-8","executionInfo":{"status":"ok","timestamp":1724725182722,"user_tz":-540,"elapsed":12,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"3fe32240-3bd3-4407-c2c1-37bc966bdb42"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((641, 10), (275, 10), (393, 10))"]},"metadata":{},"execution_count":315}]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier"],"metadata":{"id":"-G1JIMZra-r9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["modelV0 = DecisionTreeClassifier(random_state=args.random_state)\n","from sklearn.model_selection import cross_val_predict # 교차검증\n","\n","y_tr = cross_val_predict(modelV0, enc_tr, y_tr, cv=5)\n","print(f'{enc_tr.shape} / {y_tr.shape}')\n","modelV0.fit(enc_tr, y_tr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w_GJBgHNbFWB","executionInfo":{"status":"ok","timestamp":1724725182722,"user_tz":-540,"elapsed":11,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"72d8a959-1af1-4971-bfd1-cc385fe3140a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(641, 10) / (641,)\n"]},{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(random_state=50)"],"text/html":["<style>#sk-container-id-7 {color: black;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=50)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":317}]},{"cell_type":"markdown","source":["## Evaluation"],"metadata":{"id":"RviCGGxH1kHt"}},{"cell_type":"code","source":["score_tr = modelV0.score(enc_tr, y_tr)\n","score_te = modelV0.score(enc_te, y_te)\n","\n","score_tr, score_te"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lZ9bsXu2bMSL","executionInfo":{"status":"ok","timestamp":1724725182722,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"a1d129db-481a-4191-f89f-4f9b4edc55a7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.9921996879875195, 0.7672727272727272)"]},"metadata":{},"execution_count":318}]},{"cell_type":"code","source":["from sklearn.metrics import roc_curve, auc\n","\n","y_pred = modelV0.predict_proba(enc_te)[:,1]\n","fpr, tpr, thresholds = roc_curve(y_te,y_pred)\n","print(y_pred.shape)\n","auc_te = auc(fpr, tpr)\n","print(f'model: {auc_te}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dZMghR8J1tPn","executionInfo":{"status":"ok","timestamp":1724725182722,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"7359ec2e-f0a2-4451-ab43-40a516257c45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(275,)\n","model: 0.7469354475933423\n"]}]},{"cell_type":"code","source":["ori_te_pred = modelV0.predict_proba(enc_ori_te)[:,1]\n","ori_te_pred.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3VJFOdP4FjWw","executionInfo":{"status":"ok","timestamp":1724725182722,"user_tz":-540,"elapsed":9,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"19e2e466-8877-4b03-a4f7-89e1b8907653"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(393,)"]},"metadata":{},"execution_count":320}]},{"cell_type":"code","source":["modelV0.feature_importances_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jVx8YVxVmivj","executionInfo":{"status":"ok","timestamp":1724725182722,"user_tz":-540,"elapsed":9,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"f3eae16a-0ff7-4546-87c1-6ad81e5cd400"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.20174957, 0.02326607, 0.22829065, 0.05242947, 0.03908056,\n","       0.        , 0.43545616, 0.01972751, 0.        , 0.        ])"]},"metadata":{},"execution_count":321}]},{"cell_type":"code","source":["df_feature_importances = pd.DataFrame(modelV0.feature_importances_, enc_tr.columns).sort_values(by=[0], ascending=False).reset_index()\n","\n","print(f'{df_feature_importances.shape}')\n","df_feature_importances"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SeKchpr_nZFX","executionInfo":{"status":"ok","timestamp":1724725183121,"user_tz":-540,"elapsed":408,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"3577bb8c-9874-492a-b8f8-22ad849922a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(10, 2)\n"]},{"output_type":"execute_result","data":{"text/plain":["           index         0\n","0    gender_male  0.435456\n","1           fare  0.228291\n","2            age  0.201750\n","3          sibsp  0.052429\n","4         pclass  0.039081\n","5          parch  0.023266\n","6     embarked_C  0.019728\n","7  gender_female  0.000000\n","8     embarked_Q  0.000000\n","9     embarked_S  0.000000"],"text/html":["\n","  <div id=\"df-32b88e35-e2d3-4627-8827-aaccc0201ca4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>gender_male</td>\n","      <td>0.435456</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>fare</td>\n","      <td>0.228291</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>age</td>\n","      <td>0.201750</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>sibsp</td>\n","      <td>0.052429</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>pclass</td>\n","      <td>0.039081</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>parch</td>\n","      <td>0.023266</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>embarked_C</td>\n","      <td>0.019728</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>gender_female</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>embarked_Q</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>embarked_S</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-32b88e35-e2d3-4627-8827-aaccc0201ca4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-32b88e35-e2d3-4627-8827-aaccc0201ca4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-32b88e35-e2d3-4627-8827-aaccc0201ca4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f5405a9f-fa19-45fe-bdc1-6f4f9f9955b6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5405a9f-fa19-45fe-bdc1-6f4f9f9955b6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f5405a9f-fa19-45fe-bdc1-6f4f9f9955b6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d9d2a9f7-67ea-479a-9763-ea57a981aa56\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_feature_importances')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d9d2a9f7-67ea-479a-9763-ea57a981aa56 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_feature_importances');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_feature_importances","summary":"{\n  \"name\": \"df_feature_importances\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"embarked_Q\",\n          \"fare\",\n          \"parch\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1443945992897901,\n        \"min\": 0.0,\n        \"max\": 0.43545616243674196,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.2282906457261929,\n          0.02326606954921984,\n          0.43545616243674196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":322}]},{"cell_type":"code","source":["args.results.append(\n","    {\n","        'model': 'modelV4',\n","        'score_tr': score_tr,\n","        'score_te': score_te,\n","        'auc_te': auc_te,\n","        'ori_te_pred': ori_te_pred,\n","        'len_features': X_tr.shape[1],\n","        'feaute_importances': list(df_feature_importances['index'].values[:X_tr.shape[1]]),\n","        'create_dt': '0217'\n","    }\n",")\n","\n","args.results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DRLnSYPXbiSt","executionInfo":{"status":"ok","timestamp":1724725183121,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"6ad3b5c9-10d6-49ea-f3ae-575e0e847374"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'model': 'modelV4',\n","  'score_tr': 0.9921996879875195,\n","  'score_te': 0.7672727272727272,\n","  'auc_te': 0.7469354475933423,\n","  'ori_te_pred': array([1.        , 1.        , 1.        , 0.        , 1.        ,\n","         1.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         1.        , 1.        , 0.        , 0.        , 0.        ,\n","         0.        , 1.        , 0.        , 1.        , 0.        ,\n","         0.        , 1.        , 1.        , 1.        , 0.        ,\n","         0.        , 1.        , 0.        , 0.        , 1.        ,\n","         0.        , 1.        , 1.        , 0.        , 1.        ,\n","         1.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 1.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 1.        ,\n","         0.        , 1.        , 1.        , 1.        , 1.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.        , 0.        , 1.        , 1.        ,\n","         0.        , 1.        , 1.        , 0.        , 0.        ,\n","         1.        , 1.        , 0.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 1.        , 0.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.5       , 1.        , 1.        , 0.        ,\n","         1.        , 0.        , 0.        , 1.        , 0.        ,\n","         0.        , 1.        , 0.        , 0.        , 1.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         1.        , 1.        , 0.        , 1.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 1.        , 0.        , 0.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 1.        , 0.        , 0.        , 1.        ,\n","         0.        , 0.        , 1.        , 1.        , 0.        ,\n","         0.        , 1.        , 0.        , 1.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 1.        , 1.        , 0.        , 1.        ,\n","         0.        , 0.        , 0.        , 1.        , 1.        ,\n","         0.        , 0.        , 0.66666667, 0.        , 0.        ,\n","         0.        , 1.        , 1.        , 1.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 1.        ,\n","         0.        , 0.        , 1.        , 1.        , 0.        ,\n","         1.        , 1.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 1.        ,\n","         0.        , 0.        , 1.        , 1.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 1.        , 1.        , 1.        , 1.        ,\n","         1.        , 0.        , 0.        , 0.        , 0.        ,\n","         1.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 1.        , 0.        , 1.        , 1.        ,\n","         1.        , 0.        , 1.        , 0.        , 1.        ,\n","         0.        , 0.        , 0.        , 1.        , 1.        ,\n","         0.        , 1.        , 0.        , 0.        , 1.        ,\n","         0.        , 0.        , 0.        , 1.        , 1.        ,\n","         0.        , 0.        , 0.        , 0.        , 1.        ,\n","         0.        , 0.        , 0.        , 0.        , 1.        ,\n","         0.        , 1.        , 1.        , 0.        , 1.        ,\n","         0.        , 0.        , 0.        , 1.        , 0.        ,\n","         0.        , 0.        , 0.        , 1.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 0.        ,\n","         0.        , 1.        , 1.        , 0.        , 1.        ,\n","         0.        , 1.        , 0.        , 0.        , 0.        ,\n","         1.        , 0.        , 1.        , 0.        , 1.        ,\n","         1.        , 0.        , 0.        , 0.        , 1.        ,\n","         1.        , 0.        , 0.        , 1.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         1.        , 0.        , 0.        , 0.        , 1.        ,\n","         1.        , 0.        , 0.        , 1.        , 0.        ,\n","         1.        , 1.        , 1.        , 0.        , 0.        ,\n","         0.        , 1.        , 0.        , 0.        , 1.        ,\n","         1.        , 1.        , 0.        , 0.        , 1.        ,\n","         1.        , 0.        , 0.        , 1.        , 1.        ,\n","         1.        , 1.        , 1.        , 0.        , 1.        ,\n","         0.        , 0.        , 0.        , 1.        , 0.        ,\n","         0.        , 0.        , 0.        , 0.        , 1.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 0.        , 0.        ,\n","         0.        , 0.        , 1.        , 1.        , 1.        ,\n","         0.        , 0.        , 1.        ]),\n","  'len_features': 10,\n","  'feaute_importances': ['gender_male',\n","   'fare',\n","   'age',\n","   'sibsp',\n","   'pclass',\n","   'parch',\n","   'embarked_C',\n","   'gender_female',\n","   'embarked_Q',\n","   'embarked_S'],\n","  'create_dt': '0217'}]"]},"metadata":{},"execution_count":323}]},{"cell_type":"markdown","source":["# Submission"],"metadata":{"id":"IvhHDW2a4PXj"}},{"cell_type":"code","source":["df_results = pd.DataFrame(args.results).sort_values(by=['auc_te'], ascending=False)\n","df_results"],"metadata":{"id":"dRH3EPQt25r7","executionInfo":{"status":"ok","timestamp":1724725183122,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8c38c0c6-6a53-40f9-c445-89f89b25a0a2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     model  score_tr  score_te    auc_te  \\\n","0  modelV4    0.9922  0.767273  0.746935   \n","\n","                                         ori_te_pred  len_features  \\\n","0  [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, ...            10   \n","\n","                                  feaute_importances create_dt  \n","0  [gender_male, fare, age, sibsp, pclass, parch,...      0217  "],"text/html":["\n","  <div id=\"df-8d344061-0334-4b5c-847b-6db3d7e7accf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_tr</th>\n","      <th>score_te</th>\n","      <th>auc_te</th>\n","      <th>ori_te_pred</th>\n","      <th>len_features</th>\n","      <th>feaute_importances</th>\n","      <th>create_dt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>modelV4</td>\n","      <td>0.9922</td>\n","      <td>0.767273</td>\n","      <td>0.746935</td>\n","      <td>[1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, ...</td>\n","      <td>10</td>\n","      <td>[gender_male, fare, age, sibsp, pclass, parch,...</td>\n","      <td>0217</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d344061-0334-4b5c-847b-6db3d7e7accf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d344061-0334-4b5c-847b-6db3d7e7accf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d344061-0334-4b5c-847b-6db3d7e7accf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_0ec217cc-02d6-4b7a-9b31-ad1a5d039558\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_results')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_0ec217cc-02d6-4b7a-9b31-ad1a5d039558 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_results');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results","summary":"{\n  \"name\": \"df_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"modelV4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_tr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9921996879875195,\n        \"max\": 0.9921996879875195,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9921996879875195\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7672727272727272,\n        \"max\": 0.7672727272727272,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7672727272727272\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auc_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7469354475933423,\n        \"max\": 0.7469354475933423,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7469354475933423\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ori_te_pred\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len_features\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10,\n        \"max\": 10,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feaute_importances\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"create_dt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0217\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":324}]},{"cell_type":"code","source":["submission = pd.read_csv(args.default_submission_csv)\n","submission.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KrN0fM9qNLlH","executionInfo":{"status":"ok","timestamp":1724725184097,"user_tz":-540,"elapsed":634,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"a743653a-311c-480e-ad9c-aa8d60dcb6f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived\n","0          916       0.5\n","1          917       0.5\n","2          918       0.5\n","3          919       0.5\n","4          920       0.5"],"text/html":["\n","  <div id=\"df-ddc726cc-9d24-4096-be63-b38490a253eb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>916</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>917</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>918</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>919</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>920</td>\n","      <td>0.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ddc726cc-9d24-4096-be63-b38490a253eb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ddc726cc-9d24-4096-be63-b38490a253eb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ddc726cc-9d24-4096-be63-b38490a253eb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f31cc3ff-d0ee-4eb7-8971-f4572dc3b2de\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f31cc3ff-d0ee-4eb7-8971-f4572dc3b2de')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f31cc3ff-d0ee-4eb7-8971-f4572dc3b2de button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submission","summary":"{\n  \"name\": \"submission\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.5,\n        \"max\": 0.5,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":325}]},{"cell_type":"code","source":["submission['survived'] = df_results.loc[0, ['ori_te_pred']].values[0]\n","\n","print(f'{submission.isnull().sum().sum()}')\n","submission.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1_lo3-TUL7Og","executionInfo":{"status":"ok","timestamp":1724725184097,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"2d1cdad6-2076-4c8d-ed21-3a05841894a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]},{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived\n","0          916       1.0\n","1          917       1.0\n","2          918       1.0\n","3          919       0.0\n","4          920       1.0\n","5          921       1.0\n","6          922       0.0\n","7          923       0.0\n","8          924       0.0\n","9          925       0.0"],"text/html":["\n","  <div id=\"df-c2e0a9f3-f52c-4885-8571-27e8462bdcd6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>916</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>917</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>918</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>919</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>920</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>921</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>922</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>923</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>924</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>925</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2e0a9f3-f52c-4885-8571-27e8462bdcd6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c2e0a9f3-f52c-4885-8571-27e8462bdcd6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c2e0a9f3-f52c-4885-8571-27e8462bdcd6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-180ecbf4-5f28-4a5b-a634-ecbcb8c6bd45\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-180ecbf4-5f28-4a5b-a634-ecbcb8c6bd45')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-180ecbf4-5f28-4a5b-a634-ecbcb8c6bd45 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submission","summary":"{\n  \"name\": \"submission\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47759395744002997,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0,\n          0.6666666666666666,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":326}]},{"cell_type":"code","source":["submission.to_csv(args.submission_csv, header=True, index=False)"],"metadata":{"id":"Px2O6OYdL7ed"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Save Results"],"metadata":{"id":"bBHKc63d2Waj"}},{"cell_type":"code","source":["args.save_results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"Uxmnxqnl2aNJ","executionInfo":{"status":"ok","timestamp":1724725185363,"user_tz":-540,"elapsed":11,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"816a4183-4398-4854-89ab-e4eee4e58ca3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/data/MyDrive/AI_study/1. Machine Learning/3. Supervised Learning/original data/result/model_results.json'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":328}]},{"cell_type":"code","source":["df_results.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"104aSV_bOJKo","executionInfo":{"status":"ok","timestamp":1724725185363,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"21c4c353-fb43-4299-c372-1d74107ddd1c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['model', 'score_tr', 'score_te', 'auc_te', 'ori_te_pred',\n","       'len_features', 'feaute_importances', 'create_dt'],\n","      dtype='object')"]},"metadata":{},"execution_count":329}]},{"cell_type":"code","source":["df_results.drop(['ori_te_pred'], axis=1, inplace=True)"],"metadata":{"id":"KT9aOigbOPVp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_results.to_json(args.save_results, orient=\"records\")"],"metadata":{"id":"xtdnf4LiOPZT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 어떤 모델이 일을 잘했는지 확인 가능\n","df_results.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":135},"id":"3qLMRrD7PWDe","executionInfo":{"status":"ok","timestamp":1724725185363,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"0af7148a-df1d-4de7-dc3b-9d9dbe9012a9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     model  score_tr  score_te    auc_te  len_features  \\\n","0  modelV4    0.9922  0.767273  0.746935            10   \n","\n","                                  feaute_importances create_dt  \n","0  [gender_male, fare, age, sibsp, pclass, parch,...      0217  "],"text/html":["\n","  <div id=\"df-6bf907bf-0011-4272-918f-3d8dca5b28a1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_tr</th>\n","      <th>score_te</th>\n","      <th>auc_te</th>\n","      <th>len_features</th>\n","      <th>feaute_importances</th>\n","      <th>create_dt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>modelV4</td>\n","      <td>0.9922</td>\n","      <td>0.767273</td>\n","      <td>0.746935</td>\n","      <td>10</td>\n","      <td>[gender_male, fare, age, sibsp, pclass, parch,...</td>\n","      <td>0217</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6bf907bf-0011-4272-918f-3d8dca5b28a1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6bf907bf-0011-4272-918f-3d8dca5b28a1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6bf907bf-0011-4272-918f-3d8dca5b28a1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results","summary":"{\n  \"name\": \"df_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"modelV4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_tr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9921996879875195,\n        \"max\": 0.9921996879875195,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9921996879875195\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7672727272727272,\n        \"max\": 0.7672727272727272,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7672727272727272\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auc_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7469354475933423,\n        \"max\": 0.7469354475933423,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7469354475933423\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len_features\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10,\n        \"max\": 10,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feaute_importances\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"create_dt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0217\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":332}]},{"cell_type":"code","source":["import json\n","\n","load_results = None\n","with open(args.save_results, 'r') as file:\n","    load_results = json.load(file)\n","\n","load_results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MJABjgAx2gOY","executionInfo":{"status":"ok","timestamp":1724725185363,"user_tz":-540,"elapsed":6,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"dc1ddd65-4d4f-4ddf-b169-6244457b105a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'model': 'modelV4',\n","  'score_tr': 0.992199688,\n","  'score_te': 0.7672727273,\n","  'auc_te': 0.7469354476,\n","  'len_features': 10,\n","  'feaute_importances': ['gender_male',\n","   'fare',\n","   'age',\n","   'sibsp',\n","   'pclass',\n","   'parch',\n","   'embarked_C',\n","   'gender_female',\n","   'embarked_Q',\n","   'embarked_S'],\n","  'create_dt': '0217'}]"]},"metadata":{},"execution_count":333}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# 예시 데이터 (실제 데이터로 교체하세요)\n","actual = y_te\n","predict = y_pred  # 예측값\n","\n","# 임계값 설정\n","threshold = 0.5\n","predict_binary = (predict >= threshold).astype(int)\n","\n","# Confusion Matrix 계산\n","cm = confusion_matrix(actual, predict_binary, normalize=\"true\")\n","\n","# Confusion Matrix 출력\n","print(\"Confusion Matrix:\")\n","print(cm)\n","\n","# 시각화\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, cmap=\"Blues\", xticklabels=[\"Predicted 0\", \"Predicted 1\"], yticklabels=[\"Actual 0\", \"Actual 1\"])\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Label\")\n","plt.ylabel(\"Actual Label\")\n","plt.show()\n"],"metadata":{"id":"Fb9kcDEJQWvy","executionInfo":{"status":"ok","timestamp":1724725186663,"user_tz":-540,"elapsed":1305,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"colab":{"base_uri":"https://localhost:8080/","height":664},"outputId":"1af96aae-7ccf-4709-b6bb-ae1eae902036"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[0.83040936 0.16959064]\n"," [0.33653846 0.66346154]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{"image/png":{"width":725,"height":592}}}]}]}