{"cells":[{"cell_type":"markdown","metadata":{"id":"vpsOAPWLUTnq"},"source":["# Connect to google account"]},{"cell_type":"code","execution_count":137,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2325,"status":"ok","timestamp":1724830137381,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"kse6YZgdRp-B","outputId":"4244841e-1c59-44c1-8824-c26482034ee3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/data; to attempt to forcibly remount, call drive.mount(\"/content/data\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/data')"]},{"cell_type":"code","execution_count":138,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4985,"status":"ok","timestamp":1724830142359,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"iaBj_icIUeBC","outputId":"fb6d58b3-3926-45ec-f9a4-ed1e36b30b5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","fonts-nanum is already the newest version (20200506-1).\n","0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/usr/share/fonts/truetype: skipping, looped directory detected\n","/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n","/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n","/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}],"source":["# 코렙 한글깨짐 방지\n","!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf\n","\n","# 데이터 시각화에 사용할 라이브러리\n","import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","import seaborn as sns\n","\n","# 브라우저에서 바로 그려지도록\n","%matplotlib inline\n","\n","# 그래프에 retina display 적용\n","%config InlineBackend.figure_format = 'retina'\n","\n","# Colab 의 한글 폰트 설정\n","plt.rc('font', family='NanumBarunGothic')\n","\n","# 유니코드에서  음수 부호설정\n","mpl.rc('axes', unicode_minus=False)"]},{"cell_type":"markdown","metadata":{"id":"fZzXY9Z9UtEq"},"source":["# Global Variables"]},{"cell_type":"code","execution_count":187,"metadata":{"id":"k3l5qkpPJpwK","executionInfo":{"status":"ok","timestamp":1724830601358,"user_tz":-540,"elapsed":336,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import random\n","import torch\n","\n","def reset_seeds(seed=500):\n","  random.seed(seed)\n","  os.environ['PYTHONHASHSEED'] = str(seed)    # 파이썬 환경변수 시드 고정\n","  np.random.seed(seed)\n","  torch.manual_seed(seed) # cpu 연산 무작위 고정\n","  torch.cuda.manual_seed(seed) # gpu 연산 무작위 고정\n","  torch.backends.cudnn.deterministic = True  # cuda 라이브러리에서 Deterministic(결정론적)으로 예측하기 (예측에 대한 불확실성 제거 )"]},{"cell_type":"code","execution_count":188,"metadata":{"id":"QmedNTnmUo8H","executionInfo":{"status":"ok","timestamp":1724830601702,"user_tz":-540,"elapsed":2,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["import easydict\n","args = easydict.EasyDict()\n","\n","# path 정보\n","args.default_path = '/content/data/MyDrive/AI_study/1. Machine Learning/3. Supervised Learning/original data/'\n","args.train_csv = args.default_path+'train.csv'\n","args.test_csv = args.default_path+'test.csv'\n","args.default_submission_csv = args.default_path+'submission.csv'\n","\n","args.submission_csv = args.default_path+'result/submission_0828_catboost.csv'\n","args.save_results = args.default_path+\"result/model_results.json\"\n","\n","# 데이터 분석을 위한 변수들\n","args.random_state = 50 # 위의 셀에서 고정 시킴\n","args.results = []"]},{"cell_type":"markdown","metadata":{"id":"lnWjgSKSU_v6"},"source":["# Load Tritanic"]},{"cell_type":"markdown","metadata":{"id":"Nzq3WC3XVFYJ"},"source":["- Surived:0=사망, 1=생존\n","- Pclass: 1=1등석, 2=2등석, 3=3등석\n","- gender:male=남성, female=여성\n","- Age: 나이\n","- SibSp: 타이타닉 호에 동승한 자매/배우자의 수\n","- Parch: 타이타닉 호에 동승한 부모/자식의 수\n","- Ticket: 티켓 번호\n","- Fare: 승객 요금\n","- Cabin: 방 호수\n","- Embarked: 탑승지; C=셰르부르, Q=퀴즈타운, S=사우샘프턴"]},{"cell_type":"code","execution_count":189,"metadata":{"id":"uVs7ZAJOU9yp","executionInfo":{"status":"ok","timestamp":1724830602335,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.style.use('fivethirtyeight')\n","plt.ion()\n","\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":190,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvgiIYX3VVc_","outputId":"5b0b9450-f161-4c9c-fb79-1f3fed1ef98b","executionInfo":{"status":"ok","timestamp":1724830602336,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((916, 12), (393, 11))"]},"metadata":{},"execution_count":190}],"source":["ori_train = pd.read_csv(args.train_csv)\n","ori_test = pd.read_csv(args.test_csv)\n","\n","ori_train.shape, ori_test.shape"]},{"cell_type":"code","execution_count":191,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJtJNQalaV9x","outputId":"855697fa-607e-4d4d-fab5-5588b19593a9","executionInfo":{"status":"ok","timestamp":1724830602336,"user_tz":-540,"elapsed":5,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(393, 2)"]},"metadata":{},"execution_count":191}],"source":["pd.read_csv(args.default_submission_csv).shape"]},{"cell_type":"code","execution_count":192,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cIUfEFrnVfHg","outputId":"4b591146-5259-4e53-d9db-e01bc6f0b3e2","executionInfo":{"status":"ok","timestamp":1724830602336,"user_tz":-540,"elapsed":4,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['passengerid', 'survived', 'pclass', 'name', 'gender', 'age', 'sibsp',\n","       'parch', 'ticket', 'fare', 'cabin', 'embarked'],\n","      dtype='object')"]},"metadata":{},"execution_count":192}],"source":["ori_train.columns"]},{"cell_type":"code","execution_count":193,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"M7YA99udy6bW","outputId":"08b67ff4-512f-4e3b-8235-64187bc0c2f3","executionInfo":{"status":"ok","timestamp":1724830602711,"user_tz":-540,"elapsed":378,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived  pclass  \\\n","0            0         0       2   \n","1            1         0       3   \n","2            2         1       1   \n","3            3         1       3   \n","4            4         0       2   \n","\n","                                                name  gender   age  sibsp  \\\n","0                     Wheeler, Mr. Edwin Frederick\"\"    male   NaN      0   \n","1                                 Henry, Miss. Delia  female   NaN      0   \n","2  Hays, Mrs. Charles Melville (Clara Jennings Gr...  female  52.0      1   \n","3       Andersson, Mr. August Edvard (\"Wennerstrom\")    male  27.0      0   \n","4                                  Hold, Mr. Stephen    male  44.0      1   \n","\n","   parch         ticket     fare cabin embarked  \n","0      0  SC/PARIS 2159  12.8750   NaN        S  \n","1      0         382649   7.7500   NaN        Q  \n","2      1          12749  93.5000   B69        S  \n","3      0         350043   7.7958   NaN        S  \n","4      0          26707  26.0000   NaN        S  "],"text/html":["\n","  <div id=\"df-89709de0-54cb-4545-9a11-50853c759027\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Wheeler, Mr. Edwin Frederick\"\"</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SC/PARIS 2159</td>\n","      <td>12.8750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Henry, Miss. Delia</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>382649</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n","      <td>female</td>\n","      <td>52.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12749</td>\n","      <td>93.5000</td>\n","      <td>B69</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Andersson, Mr. August Edvard (\"Wennerstrom\")</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>350043</td>\n","      <td>7.7958</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Hold, Mr. Stephen</td>\n","      <td>male</td>\n","      <td>44.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26707</td>\n","      <td>26.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89709de0-54cb-4545-9a11-50853c759027')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-89709de0-54cb-4545-9a11-50853c759027 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-89709de0-54cb-4545-9a11-50853c759027');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-90201500-9baf-4b4e-ada4-371133a14990\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-90201500-9baf-4b4e-ada4-371133a14990')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-90201500-9baf-4b4e-ada4-371133a14990 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_train","summary":"{\n  \"name\": \"ori_train\",\n  \"rows\": 916,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264,\n        \"min\": 0,\n        \"max\": 915,\n        \"num_unique_values\": 916,\n        \"samples\": [\n          380,\n          879,\n          355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 915,\n        \"samples\": [\n          \"Hocking, Mr. Richard George\",\n          \"Collyer, Mr. Harvey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.185627316833022,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          7.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 703,\n        \"samples\": [\n          \"233478\",\n          \"113780\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.506410537600836,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          25.7,\n          7.2292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"B45\",\n          \"B79\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":193}],"source":["ori_train.head()"]},{"cell_type":"code","execution_count":194,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ySaIXiswVlMR","outputId":"82084850-7b57-424f-e789-9e1a5ead8bfc","executionInfo":{"status":"ok","timestamp":1724830602711,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(916, 916)"]},"metadata":{},"execution_count":194}],"source":["ori_train['passengerid'].nunique(), ori_train.shape[0]"]},{"cell_type":"code","execution_count":195,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"No3vTz4AVuFo","outputId":"74485246-2319-4266-d27f-380249e44348","executionInfo":{"status":"ok","timestamp":1724830602712,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   survived  pclass                                               name  \\\n","0         0       2                     Wheeler, Mr. Edwin Frederick\"\"   \n","1         0       3                                 Henry, Miss. Delia   \n","2         1       1  Hays, Mrs. Charles Melville (Clara Jennings Gr...   \n","3         1       3       Andersson, Mr. August Edvard (\"Wennerstrom\")   \n","4         0       2                                  Hold, Mr. Stephen   \n","\n","   gender   age  sibsp  parch         ticket     fare cabin embarked  \n","0    male   NaN      0      0  SC/PARIS 2159  12.8750   NaN        S  \n","1  female   NaN      0      0         382649   7.7500   NaN        Q  \n","2  female  52.0      1      1          12749  93.5000   B69        S  \n","3    male  27.0      0      0         350043   7.7958   NaN        S  \n","4    male  44.0      1      0          26707  26.0000   NaN        S  "],"text/html":["\n","  <div id=\"df-2676f34d-3d18-41e3-a3be-f1344a4afa35\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>survived</th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Wheeler, Mr. Edwin Frederick\"\"</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SC/PARIS 2159</td>\n","      <td>12.8750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Henry, Miss. Delia</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>382649</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n","      <td>female</td>\n","      <td>52.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12749</td>\n","      <td>93.5000</td>\n","      <td>B69</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Andersson, Mr. August Edvard (\"Wennerstrom\")</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>350043</td>\n","      <td>7.7958</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Hold, Mr. Stephen</td>\n","      <td>male</td>\n","      <td>44.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26707</td>\n","      <td>26.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2676f34d-3d18-41e3-a3be-f1344a4afa35')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2676f34d-3d18-41e3-a3be-f1344a4afa35 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2676f34d-3d18-41e3-a3be-f1344a4afa35');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-12426e36-97cf-4e9c-a901-f68203e3b08a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12426e36-97cf-4e9c-a901-f68203e3b08a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-12426e36-97cf-4e9c-a901-f68203e3b08a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_train","summary":"{\n  \"name\": \"ori_train\",\n  \"rows\": 916,\n  \"fields\": [\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 915,\n        \"samples\": [\n          \"Hocking, Mr. Richard George\",\n          \"Collyer, Mr. Harvey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.185627316833022,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          7.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 703,\n        \"samples\": [\n          \"233478\",\n          \"113780\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.506410537600836,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          25.7,\n          7.2292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"B45\",\n          \"B79\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":195}],"source":["ori_train.drop('passengerid', axis=1, inplace=True)\n","ori_train.head()"]},{"cell_type":"code","execution_count":196,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"xFmCng-XEKi7","outputId":"7f2b378a-f641-4ddb-f781-87d680d7adc7","executionInfo":{"status":"ok","timestamp":1724830602712,"user_tz":-540,"elapsed":6,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(393, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["             pclass                                        name  gender   age  \\\n","passengerid                                                                     \n","916               3                 McGowan, Miss. Anna \"Annie\"  female  15.0   \n","917               2                         Pinsky, Mrs. (Rosa)  female  32.0   \n","918               3           McCarthy, Miss. Catherine Katie\"\"  female   NaN   \n","919               3      Franklin, Mr. Charles (Charles Fardon)    male   NaN   \n","920               1  Wick, Mrs. George Dennick (Mary Hitchcock)  female  45.0   \n","\n","             sibsp  parch              ticket      fare cabin embarked  \n","passengerid                                                             \n","916              0      0              330923    8.0292   NaN        Q  \n","917              0      0              234604   13.0000   NaN        S  \n","918              0      0              383123    7.7500   NaN        Q  \n","919              0      0  SOTON/O.Q. 3101314    7.2500   NaN        S  \n","920              1      1               36928  164.8667   NaN        S  "],"text/html":["\n","  <div id=\"df-7f334ade-7277-489e-b2bf-48d0ae8eff69\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","    <tr>\n","      <th>passengerid</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>916</th>\n","      <td>3</td>\n","      <td>McGowan, Miss. Anna \"Annie\"</td>\n","      <td>female</td>\n","      <td>15.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330923</td>\n","      <td>8.0292</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>917</th>\n","      <td>2</td>\n","      <td>Pinsky, Mrs. (Rosa)</td>\n","      <td>female</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>234604</td>\n","      <td>13.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>918</th>\n","      <td>3</td>\n","      <td>McCarthy, Miss. Catherine Katie\"\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>383123</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>919</th>\n","      <td>3</td>\n","      <td>Franklin, Mr. Charles (Charles Fardon)</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SOTON/O.Q. 3101314</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>920</th>\n","      <td>1</td>\n","      <td>Wick, Mrs. George Dennick (Mary Hitchcock)</td>\n","      <td>female</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>36928</td>\n","      <td>164.8667</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f334ade-7277-489e-b2bf-48d0ae8eff69')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7f334ade-7277-489e-b2bf-48d0ae8eff69 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7f334ade-7277-489e-b2bf-48d0ae8eff69');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4fa51b25-2c08-4fb5-8ce5-f91e658f0118\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4fa51b25-2c08-4fb5-8ce5-f91e658f0118')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4fa51b25-2c08-4fb5-8ce5-f91e658f0118 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_test","summary":"{\n  \"name\": \"ori_test\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 393,\n        \"samples\": [\n          \"Spector, Mr. Woolf\",\n          \"Mernagh, Mr. Robert\",\n          \"Kraeff, Mr. Theodor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.955055573706593,\n        \"min\": 0.42,\n        \"max\": 67.0,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          28.0,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 345,\n        \"samples\": [\n          \"2628\",\n          \"C.A. 6212\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.58265418051246,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          32.5,\n          39.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 86,\n        \"samples\": [\n          \"B77\",\n          \"E38\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Q\",\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":196}],"source":["ori_test.set_index(['passengerid'], inplace=True)\n","print(f'{ori_test.shape}')\n","ori_test.head()"]},{"cell_type":"markdown","metadata":{"id":"A6vblT6FV9AL"},"source":["# train_test_split"]},{"cell_type":"code","execution_count":197,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"JjOQ9IMMWPj0","outputId":"9fd14413-9247-46c3-9a97-bbd5a89500bb","executionInfo":{"status":"ok","timestamp":1724830603073,"user_tz":-540,"elapsed":4,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            counts     freqs\n","categories                  \n","Died           570  0.622271\n","Survived       346  0.377729"],"text/html":["\n","  <div id=\"df-2c527d3c-20a3-450a-9dbd-b6c4deebab18\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>counts</th>\n","      <th>freqs</th>\n","    </tr>\n","    <tr>\n","      <th>categories</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Died</th>\n","      <td>570</td>\n","      <td>0.622271</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>346</td>\n","      <td>0.377729</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c527d3c-20a3-450a-9dbd-b6c4deebab18')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2c527d3c-20a3-450a-9dbd-b6c4deebab18 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2c527d3c-20a3-450a-9dbd-b6c4deebab18');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-34833db7-8da2-4094-850f-f27c8b2dd17b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34833db7-8da2-4094-850f-f27c8b2dd17b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-34833db7-8da2-4094-850f-f27c8b2dd17b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"new_survived\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"categories\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Survived\",\n          \"Died\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"counts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 158,\n        \"min\": 346,\n        \"max\": 570,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          346,\n          570\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freqs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1729169421242212,\n        \"min\": 0.3777292576419214,\n        \"max\": 0.6222707423580786,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3777292576419214,\n          0.6222707423580786\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":197}],"source":["new_survived = pd.Categorical(ori_train[\"survived\"])\n","new_survived = new_survived.rename_categories([\"Died\",\"Survived\"])\n","\n","new_survived.describe()"]},{"cell_type":"code","execution_count":198,"metadata":{"id":"koeYL3h2V2Ks","executionInfo":{"status":"ok","timestamp":1724830603073,"user_tz":-540,"elapsed":3,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":199,"metadata":{"id":"7PbKWXGgDQ3w","executionInfo":{"status":"ok","timestamp":1724830603073,"user_tz":-540,"elapsed":3,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["y = ori_train['survived']\n","X = ori_train.drop(['survived'], axis=1)"]},{"cell_type":"code","execution_count":200,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PKVlYZkjWCWC","executionInfo":{"status":"ok","timestamp":1724830603073,"user_tz":-540,"elapsed":3,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"48d2f8f1-7e8b-496f-ad1c-a15a0a978900"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((641, 10), (275, 10), (641,), (275,))"]},"metadata":{},"execution_count":200}],"source":["reset_seeds()\n","X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.3, stratify=ori_train['survived'])\n","\n","X_tr.shape, X_te.shape, y_tr.shape, y_te.shape"]},{"cell_type":"code","execution_count":200,"metadata":{"id":"AlYwj8piNfKz","executionInfo":{"status":"ok","timestamp":1724830603073,"user_tz":-540,"elapsed":2,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"rLL_5f3yW1w6"},"source":["# Base ModelV0"]},{"cell_type":"code","execution_count":201,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1724830606136,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"gk5uK32pWxw5","outputId":"8bce1fe9-4314-433a-ad94-33bea9e760fc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((641, 10), (275, 10), (393, 10))"]},"metadata":{},"execution_count":201}],"source":["train = X_tr.copy()\n","test = X_te.copy()\n","ori_te = ori_test.copy()\n","\n","train.shape, test.shape, ori_te.shape"]},{"cell_type":"markdown","metadata":{"id":"if2WMXAMXC9h"},"source":["## Data Preprocessing"]},{"cell_type":"code","execution_count":202,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1724830608398,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"VAaFr2cnXA1E","outputId":"da6b5e6d-3471-4761-c9bb-718e1039ce0a"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 641 entries, 582 to 286\n","Data columns (total 10 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   pclass    641 non-null    int64  \n"," 1   name      641 non-null    object \n"," 2   gender    641 non-null    object \n"," 3   age       520 non-null    float64\n"," 4   sibsp     641 non-null    int64  \n"," 5   parch     641 non-null    int64  \n"," 6   ticket    641 non-null    object \n"," 7   fare      641 non-null    float64\n"," 8   cabin     153 non-null    object \n"," 9   embarked  640 non-null    object \n","dtypes: float64(2), int64(3), object(5)\n","memory usage: 55.1+ KB\n"]}],"source":["train.info()"]},{"cell_type":"markdown","metadata":{"id":"vxYO1NrXXMtx"},"source":["drop columns"]},{"cell_type":"code","execution_count":203,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":337,"status":"ok","timestamp":1724830625057,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"BMAMzgzhXKEM","outputId":"7ae8bbce-7251-40a5-cb6a-42ed98ae0726"},"outputs":[{"output_type":"stream","name":"stdout","text":["before: (641, 10) / (275, 10)\n","after: (641, 7) / (275, 7)\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 641 entries, 582 to 286\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   pclass    641 non-null    int64  \n"," 1   gender    641 non-null    object \n"," 2   age       520 non-null    float64\n"," 3   sibsp     641 non-null    int64  \n"," 4   parch     641 non-null    int64  \n"," 5   fare      641 non-null    float64\n"," 6   embarked  640 non-null    object \n","dtypes: float64(2), int64(3), object(2)\n","memory usage: 40.1+ KB\n"]}],"source":["print(f'before: {train.shape} / {test.shape}')\n","drop_cols = ['name', 'ticket', 'cabin']\n","\n","train.drop(drop_cols, axis=1, inplace=True) # 모델이 학습하는데 사용하는 데이터\n","test.drop(drop_cols, axis=1, inplace=True) # 모델의 학습을 평가(잘했는지?? 못했는지??)하기 위한 데이터\n","ori_te.drop(drop_cols, axis=1, inplace=True) # 학습이 잘된 모델을 이용해서 내가 알고 싶은(ori_te) 데이터를 예측하게 하는 것\n","\n","print(f'after: {train.shape} / {test.shape}')\n","train.info()"]},{"cell_type":"markdown","metadata":{"id":"-MC0A5GjXZex"},"source":["missing value"]},{"cell_type":"code","execution_count":156,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1724830142889,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"7Sz-hgEuXV8_","outputId":"4a9e5a97-daa1-48f4-b6a4-f96c2b0d128f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass        0\n","gender        0\n","age         121\n","sibsp         0\n","parch         0\n","fare          0\n","embarked      1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>121</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":156}],"source":["train.isnull().sum()"]},{"cell_type":"code","execution_count":157,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1724830142889,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"vczgi273XfAU","outputId":"d3222780-c716-4046-89e7-be315ab44cef"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass       0\n","gender       0\n","age         59\n","sibsp        0\n","parch        0\n","fare         0\n","embarked     0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>59</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":157}],"source":["test.isnull().sum()"]},{"cell_type":"code","execution_count":158,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1724830142889,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"zlp5VXiLCLrR","outputId":"cd792f71-685d-4bc7-f01f-cc78cec7de98"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass       0\n","gender       0\n","age         83\n","sibsp        0\n","parch        0\n","fare         1\n","embarked     1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>83</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":158}],"source":["ori_te.isnull().sum()"]},{"cell_type":"code","execution_count":204,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":392,"status":"ok","timestamp":1724830630726,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Xzm5OVHLXhAv","outputId":"ca53ca60-0448-487f-972f-efabe78c7605"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(27.0, 14.5, 'S')"]},"metadata":{},"execution_count":204}],"source":["age_median = train['age'].median()\n","fare_median = train['fare'].median()\n","embarked_mode = train['embarked'].mode().values[0]\n","\n","age_median, fare_median, embarked_mode"]},{"cell_type":"code","execution_count":205,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":473,"status":"ok","timestamp":1724830631674,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"zr6q6vb1XqrG","outputId":"d8e2c654-4898-4169-e0a6-fd0f8fc2b68f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 0, 0)"]},"metadata":{},"execution_count":205}],"source":["train['age'].fillna(age_median, inplace=True)\n","test['age'].fillna(age_median, inplace=True)\n","ori_te['age'].fillna(age_median, inplace=True)\n","\n","train['fare'].fillna(fare_median, inplace=True)\n","test['fare'].fillna(fare_median, inplace=True)\n","ori_te['fare'].fillna(fare_median, inplace=True)\n","\n","train['embarked'].fillna(embarked_mode, inplace=True)\n","test['embarked'].fillna(embarked_mode, inplace=True)\n","ori_te['embarked'].fillna(embarked_mode, inplace=True)\n","\n","train.isnull().sum().sum(), test.isnull().sum().sum(), ori_te.isnull().sum().sum()"]},{"cell_type":"markdown","metadata":{"id":"eUYyVFT4YOLY"},"source":["data encoding"]},{"cell_type":"code","execution_count":161,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1724830142889,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"vxsmYuiZYJ3i"},"outputs":[],"source":["from sklearn.preprocessing import OneHotEncoder"]},{"cell_type":"code","execution_count":162,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1724830142889,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"fKxuPwvGz69n","outputId":"2f6b8dc9-1b9c-4a1c-9a32-c5ff1db52b26"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['pclass', 'gender', 'age', 'sibsp', 'parch', 'fare', 'embarked'], dtype='object')"]},"metadata":{},"execution_count":162}],"source":["train.columns"]},{"cell_type":"code","execution_count":163,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1724830142889,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"ijwMCjMbYTFE","outputId":"f4a6795d-fded-42fe-c392-88fa9380fb44"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['sibsp', 'parch', 'age', 'fare', 'pclass']"]},"metadata":{},"execution_count":163}],"source":["enc_cols = ['gender', 'embarked']\n","normal_cols = list(set(train.columns) - set(enc_cols))\n","normal_cols"]},{"cell_type":"code","execution_count":164,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":242},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1724830142889,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"973B2IbhYdWK","outputId":"2c10822d-156a-49c3-9e1c-17f61a5d8437"},"outputs":[{"output_type":"stream","name":"stdout","text":["before: (641, 7) / (275, 7)\n","after: (641, 10) / (275, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["   sibsp  parch   age     fare  pclass  gender_female  gender_male  \\\n","0      0      0  32.0   7.9250       3            0.0          1.0   \n","1      0      0  21.0  11.5000       2            0.0          1.0   \n","2      0      0  27.0   7.7750       3            0.0          1.0   \n","3      0      0  19.0   7.8958       3            0.0          1.0   \n","4      0      0  74.0   7.7750       3            0.0          1.0   \n","\n","   embarked_C  embarked_Q  embarked_S  \n","0         0.0         0.0         1.0  \n","1         0.0         0.0         1.0  \n","2         0.0         0.0         1.0  \n","3         0.0         0.0         1.0  \n","4         0.0         0.0         1.0  "],"text/html":["\n","  <div id=\"df-8a287b8f-1081-4950-93b3-4dafccc75c8d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>age</th>\n","      <th>fare</th>\n","      <th>pclass</th>\n","      <th>gender_female</th>\n","      <th>gender_male</th>\n","      <th>embarked_C</th>\n","      <th>embarked_Q</th>\n","      <th>embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>32.0</td>\n","      <td>7.9250</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>21.0</td>\n","      <td>11.5000</td>\n","      <td>2</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>27.0</td>\n","      <td>7.7750</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>7.8958</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>74.0</td>\n","      <td>7.7750</td>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a287b8f-1081-4950-93b3-4dafccc75c8d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8a287b8f-1081-4950-93b3-4dafccc75c8d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8a287b8f-1081-4950-93b3-4dafccc75c8d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dfcbf29c-f673-459e-8020-6d185e8ab973\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dfcbf29c-f673-459e-8020-6d185e8ab973')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dfcbf29c-f673-459e-8020-6d185e8ab973 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"enc_tr","summary":"{\n  \"name\": \"enc_tr\",\n  \"rows\": 641,\n  \"fields\": [\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.853993306253866,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          61.0,\n          32.0,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.6719436759877,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 219,\n        \"samples\": [\n          227.525,\n          18.7875,\n          57.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47667411690645545,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.47667411690645545,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4058248855769076,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28029228949562995,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.455626550830999,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":164}],"source":["print(f'before: {train.shape} / {test.shape}')\n","\n","enc = OneHotEncoder()\n","# train\n","tmp_tr = pd.DataFrame(\n","    enc.fit_transform(train[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_tr = pd.concat(\n","    [train[normal_cols].reset_index(drop=True), tmp_tr.reset_index(drop=True)]\n","    , axis=1\n",")\n","# test\n","tmp_te = pd.DataFrame(\n","    enc.transform(test[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_te = pd.concat(\n","    [test[normal_cols].reset_index(drop=True), tmp_te.reset_index(drop=True)]\n","    , axis=1\n",")\n","# ori_test\n","tmp_te = pd.DataFrame(\n","    enc.transform(ori_te[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_ori_te = pd.concat(\n","    [ori_te[normal_cols].reset_index(drop=True), tmp_te.reset_index(drop=True)]\n","    , axis=1\n",")\n","\n","print(f'after: {enc_tr.shape} / {enc_te.shape}')\n","enc_tr.head()"]},{"cell_type":"code","execution_count":165,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1089,"status":"ok","timestamp":1724830143967,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"oAo317YadSER","outputId":"56fd4816-178c-48ec-b7e1-27b3ac6ca9c1"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"image/png":{"width":960,"height":587}}}],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","\n","# Fare 컬럼의 분포를 시각화\n","plt.figure(figsize=(10, 6))\n","sns.histplot(enc_tr['fare'], bins=50, kde=True)\n","plt.title('Distribution of Fare in Titanic Dataset')\n","plt.xlabel('Fare')\n","plt.ylabel('Frequency')\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"X-EAHwGMae1r"},"source":["## Training"]},{"cell_type":"code","execution_count":206,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344,"status":"ok","timestamp":1724830641780,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"TtAqy9dTaMzr","outputId":"d500980c-82a1-4d9b-91e1-84bd9d44c2e5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 0, 0)"]},"metadata":{},"execution_count":206}],"source":["enc_tr.isnull().sum().sum(), enc_te.isnull().sum().sum(), enc_ori_te.isnull().sum().sum()"]},{"cell_type":"code","execution_count":207,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1724830642113,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"lyM1TD6fEz-8","outputId":"5f038a23-b18a-4157-de72-71a67c86984b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((641, 10), (275, 10), (393, 10))"]},"metadata":{},"execution_count":207}],"source":["enc_tr.shape, enc_te.shape, enc_ori_te.shape"]},{"cell_type":"code","source":["!pip install catboost"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r1hDS7DA6a0y","executionInfo":{"status":"ok","timestamp":1724830652576,"user_tz":-540,"elapsed":10466,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"6ca45cbd-5f43-4c41-df4e-1f03b68da0c8"},"execution_count":208,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting catboost\n","  Downloading catboost-1.2.5-cp310-cp310-manylinux2014_x86_64.whl.metadata (1.2 kB)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.26.4)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (2.1.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.13.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2024.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.2)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (9.0.0)\n","Downloading catboost-1.2.5-cp310-cp310-manylinux2014_x86_64.whl (98.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.2/98.2 MB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: catboost\n","Successfully installed catboost-1.2.5\n"]}]},{"cell_type":"code","execution_count":209,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1724830652576,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"-G1JIMZra-r9"},"outputs":[],"source":["from catboost  import CatBoostClassifier"]},{"cell_type":"code","execution_count":210,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"executionInfo":{"elapsed":530,"status":"ok","timestamp":1724830653102,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"w_GJBgHNbFWB","outputId":"5aae5c40-ccce-437b-8f70-fdf51b907e99"},"outputs":[{"output_type":"stream","name":"stdout","text":["(641, 10) / (641,)\n","[LightGBM] [Info] Number of positive: 242, number of negative: 399\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000216 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 195\n","[LightGBM] [Info] Number of data points in the train set: 641, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377535 -> initscore=-0.500024\n","[LightGBM] [Info] Start training from score -0.500024\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"]},{"output_type":"execute_result","data":{"text/plain":["LGBMClassifier(random_state=50)"],"text/html":["<style>#sk-container-id-5 {color: black;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMClassifier(random_state=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMClassifier</label><div class=\"sk-toggleable__content\"><pre>LGBMClassifier(random_state=50)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":210}],"source":["modelV0 = LGBMClassifier(random_state=args.random_state)\n","# from sklearn.model_selection import cross_val_predict # 교차검증\n","\n","# y_tr = cross_val_predict(modelV0, enc_tr, y_tr, cv=5)\n","print(f'{enc_tr.shape} / {y_tr.shape}')\n","modelV0.fit(enc_tr, y_tr)"]},{"cell_type":"markdown","metadata":{"id":"RviCGGxH1kHt"},"source":["## Evaluation"]},{"cell_type":"code","execution_count":211,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lZ9bsXu2bMSL","executionInfo":{"status":"ok","timestamp":1724830653103,"user_tz":-540,"elapsed":12,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"62ae522b-2bb1-4614-e36f-a232d151c666"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.9547581903276131, 0.8327272727272728)"]},"metadata":{},"execution_count":211}],"source":["score_tr = modelV0.score(enc_tr, y_tr)\n","score_te = modelV0.score(enc_te, y_te)\n","\n","score_tr, score_te"]},{"cell_type":"code","execution_count":212,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dZMghR8J1tPn","executionInfo":{"status":"ok","timestamp":1724830653103,"user_tz":-540,"elapsed":11,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"daba3609-c16f-400e-d2c7-b53c2bcd9c69"},"outputs":[{"output_type":"stream","name":"stdout","text":["(275,)\n","model: 0.916020017993702\n"]}],"source":["from sklearn.metrics import roc_curve, auc\n","\n","y_pred = modelV0.predict_proba(enc_te)[:,1]\n","fpr, tpr, thresholds = roc_curve(y_te,y_pred)\n","print(y_pred.shape)\n","auc_te = auc(fpr, tpr)\n","print(f'model: {auc_te}')"]},{"cell_type":"code","execution_count":213,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3VJFOdP4FjWw","executionInfo":{"status":"ok","timestamp":1724830653103,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"e53b4ba2-be52-41a2-9afc-f84ad69968c1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(393,)"]},"metadata":{},"execution_count":213}],"source":["ori_te_pred = modelV0.predict_proba(enc_ori_te)[:,1]\n","ori_te_pred.shape"]},{"cell_type":"code","execution_count":214,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jVx8YVxVmivj","executionInfo":{"status":"ok","timestamp":1724830653103,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"a01dd790-b638-456f-c79d-745ea024eabe"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 123,   57,  789, 1159,   98,   76,   15,   31,   23,   87],\n","      dtype=int32)"]},"metadata":{},"execution_count":214}],"source":["modelV0.feature_importances_"]},{"cell_type":"code","execution_count":215,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"SeKchpr_nZFX","executionInfo":{"status":"ok","timestamp":1724830653103,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"a45e114b-10ab-4f19-e58e-5ecbd69aa8cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["(10, 2)\n"]},{"output_type":"execute_result","data":{"text/plain":["           index     0\n","0           fare  1159\n","1            age   789\n","2          sibsp   123\n","3         pclass    98\n","4     embarked_S    87\n","5  gender_female    76\n","6          parch    57\n","7     embarked_C    31\n","8     embarked_Q    23\n","9    gender_male    15"],"text/html":["\n","  <div id=\"df-6af6e299-f1cd-468e-aac8-c7a73307c93f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>fare</td>\n","      <td>1159</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>age</td>\n","      <td>789</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>sibsp</td>\n","      <td>123</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>pclass</td>\n","      <td>98</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>embarked_S</td>\n","      <td>87</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>gender_female</td>\n","      <td>76</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>parch</td>\n","      <td>57</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>embarked_C</td>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>embarked_Q</td>\n","      <td>23</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>gender_male</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6af6e299-f1cd-468e-aac8-c7a73307c93f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6af6e299-f1cd-468e-aac8-c7a73307c93f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6af6e299-f1cd-468e-aac8-c7a73307c93f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e327319c-10b2-497b-80ec-16d04ac35294\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e327319c-10b2-497b-80ec-16d04ac35294')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e327319c-10b2-497b-80ec-16d04ac35294 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7f7822db-9722-49f5-b551-a25bd7df0311\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_feature_importances')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7f7822db-9722-49f5-b551-a25bd7df0311 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_feature_importances');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_feature_importances","summary":"{\n  \"name\": \"df_feature_importances\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"embarked_Q\",\n          \"age\",\n          \"gender_female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          23,\n          789,\n          76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":215}],"source":["df_feature_importances = pd.DataFrame(modelV0.feature_importances_, enc_tr.columns).sort_values(by=[0], ascending=False).reset_index()\n","\n","print(f'{df_feature_importances.shape}')\n","df_feature_importances"]},{"cell_type":"code","execution_count":216,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DRLnSYPXbiSt","executionInfo":{"status":"ok","timestamp":1724830653103,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"fa52a561-45cd-4bb9-b5c8-229ab350f34f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'model': 'modelV4',\n","  'score_tr': 0.9547581903276131,\n","  'score_te': 0.8327272727272728,\n","  'auc_te': 0.916020017993702,\n","  'ori_te_pred': array([6.10704126e-01, 9.80944014e-01, 9.20661107e-01, 5.02339164e-02,\n","         9.58159062e-01, 9.72873369e-01, 2.92642246e-02, 7.63389130e-02,\n","         1.15425781e-01, 1.56181535e-02, 2.47936711e-01, 6.34137479e-02,\n","         9.25799344e-01, 2.82064668e-01, 1.22721392e-01, 1.20820581e-01,\n","         2.37680704e-01, 8.41698138e-02, 2.55459514e-02, 7.63389130e-02,\n","         3.36756289e-02, 1.08900721e-02, 4.76651652e-02, 4.28038185e-03,\n","         9.89034940e-02, 4.33559842e-02, 1.29298819e-01, 7.29029565e-01,\n","         1.46114878e-01, 3.54773907e-01, 9.34065592e-01, 6.59832099e-01,\n","         5.42325709e-02, 2.14201480e-01, 4.83341301e-01, 3.41121571e-03,\n","         9.98222483e-01, 4.17705177e-03, 4.13211138e-02, 1.63954539e-02,\n","         4.79945308e-03, 9.90540828e-01, 3.06137019e-02, 9.85795053e-01,\n","         1.16401654e-03, 8.65221284e-03, 3.92643986e-02, 1.53129266e-01,\n","         2.26479599e-02, 7.43270245e-02, 7.61142733e-01, 4.26679311e-02,\n","         9.98239126e-01, 1.08619690e-02, 8.88007126e-01, 9.42124297e-01,\n","         3.56539063e-01, 3.60251306e-02, 2.54411368e-02, 3.99062282e-01,\n","         9.79397196e-01, 8.25541156e-01, 7.05800666e-01, 2.64062120e-01,\n","         1.36242559e-02, 1.70454358e-02, 5.52223612e-01, 4.60976750e-01,\n","         1.04917513e-02, 9.90512847e-01, 1.25336949e-01, 9.03951055e-01,\n","         9.30551072e-01, 9.38516017e-01, 1.91270480e-02, 4.25568143e-01,\n","         1.17489262e-02, 9.75278526e-01, 3.60251306e-02, 2.83180084e-02,\n","         1.27745864e-01, 5.75944481e-02, 1.27186302e-02, 1.12159209e-01,\n","         5.71288580e-01, 9.29448127e-01, 5.49601242e-02, 9.31437842e-01,\n","         2.01842792e-01, 1.34092911e-01, 1.54042050e-01, 9.97809819e-01,\n","         8.66498053e-01, 2.97016735e-02, 4.45061145e-02, 1.37346556e-02,\n","         4.23107982e-03, 4.41372119e-01, 3.80942437e-02, 9.53836234e-02,\n","         9.78776446e-01, 9.49041642e-01, 3.90975356e-03, 2.48084387e-02,\n","         9.89034940e-02, 3.66185914e-02, 6.11503533e-02, 8.59254017e-01,\n","         1.83096968e-02, 8.56315203e-01, 3.71113533e-02, 7.45191286e-03,\n","         3.92929454e-01, 2.94609295e-03, 1.31450276e-02, 2.96077112e-02,\n","         1.03355442e-01, 2.98184436e-01, 6.56438420e-01, 2.15402018e-01,\n","         9.98805552e-01, 2.93570403e-02, 4.79945308e-03, 9.97602480e-01,\n","         1.36883016e-01, 1.62581742e-03, 9.80315473e-01, 1.41579258e-02,\n","         6.17567431e-02, 9.96918666e-01, 3.06995152e-02, 5.02339164e-02,\n","         9.20661107e-01, 6.74059498e-01, 1.62919803e-02, 9.96907069e-01,\n","         9.97517787e-01, 3.60251306e-02, 9.94930802e-01, 5.14453152e-01,\n","         1.89470665e-02, 7.63389130e-02, 3.60251306e-02, 4.09741758e-01,\n","         2.86431480e-01, 2.55198681e-01, 9.90438226e-01, 2.34670903e-02,\n","         3.60251306e-02, 2.68875414e-02, 4.52486533e-01, 1.08619690e-02,\n","         1.30326547e-03, 6.11503533e-02, 3.23050545e-01, 2.21097015e-01,\n","         9.96160423e-01, 1.25336949e-01, 3.41121571e-03, 9.81660135e-01,\n","         2.35402192e-02, 3.47874446e-01, 9.63427417e-01, 9.95660051e-01,\n","         1.21773544e-01, 5.06607502e-01, 7.37872925e-01, 5.26211698e-03,\n","         9.87771730e-01, 1.31044016e-01, 5.34452491e-04, 1.95947486e-02,\n","         1.08619690e-02, 7.07747523e-02, 2.46391556e-01, 1.08619690e-02,\n","         6.99156081e-01, 9.50000610e-01, 9.97766897e-01, 9.88003992e-01,\n","         3.30317619e-02, 4.62712856e-02, 1.91481172e-02, 9.68028455e-01,\n","         9.93499664e-01, 6.68642149e-01, 9.93453908e-01, 4.42653480e-01,\n","         4.66589686e-01, 1.55532523e-02, 1.26630532e-02, 9.27520142e-01,\n","         9.04848492e-01, 9.93192231e-01, 2.77768713e-01, 1.08619690e-02,\n","         1.88140489e-01, 4.23919654e-02, 1.82453063e-03, 4.83219131e-01,\n","         3.22467900e-03, 7.63389130e-02, 3.99576238e-02, 3.25552359e-01,\n","         1.74610820e-02, 9.54630440e-03, 8.55588387e-01, 3.86091313e-02,\n","         6.55207482e-01, 4.63926213e-02, 5.42325709e-02, 7.09068955e-02,\n","         4.54133666e-01, 1.35253720e-02, 9.50000610e-01, 9.71146836e-01,\n","         2.94107714e-02, 4.47837935e-02, 7.13462863e-01, 4.23756312e-02,\n","         1.88276838e-02, 9.88066198e-01, 2.93371041e-02, 3.24594600e-02,\n","         2.61734260e-02, 2.71191490e-02, 4.02533703e-02, 9.76479862e-01,\n","         9.97655980e-01, 9.98984336e-01, 7.55150985e-01, 5.80330140e-01,\n","         6.74850634e-01, 3.67214787e-02, 9.69324956e-01, 5.17328938e-01,\n","         6.57548308e-02, 6.25273711e-02, 5.60368416e-02, 4.54554215e-02,\n","         4.28038185e-03, 2.93722902e-02, 7.29301649e-03, 1.04917513e-02,\n","         1.08619690e-02, 1.24240337e-02, 6.06520254e-01, 2.94107714e-02,\n","         8.91685813e-01, 9.98159886e-01, 9.88295328e-01, 4.24730764e-02,\n","         9.43096895e-01, 1.62919803e-02, 9.51082000e-01, 3.66797531e-03,\n","         1.15731313e-02, 2.62524111e-01, 9.74627360e-01, 9.32639350e-01,\n","         2.08279018e-03, 9.84095299e-01, 8.42096238e-02, 6.39374702e-02,\n","         5.06241512e-01, 3.56895452e-01, 2.12937720e-01, 3.28627038e-01,\n","         9.18062110e-01, 9.29667914e-01, 3.15094592e-01, 3.04109425e-02,\n","         2.54411368e-02, 1.25336949e-01, 9.77394833e-01, 7.63389130e-02,\n","         7.16832339e-02, 1.40976126e-01, 2.36995835e-02, 3.24714081e-01,\n","         7.63389130e-02, 9.35786601e-01, 9.00287367e-01, 2.48084387e-02,\n","         9.97936899e-01, 2.01808817e-02, 1.31044016e-01, 8.40408458e-02,\n","         9.42124297e-01, 4.52486533e-01, 2.20149788e-01, 1.63256732e-02,\n","         4.72369092e-01, 3.09698145e-02, 3.78693422e-02, 9.54509171e-01,\n","         6.12856524e-02, 7.63389130e-02, 9.73479064e-01, 7.10718385e-02,\n","         4.02722956e-02, 9.80970255e-01, 1.12159209e-01, 1.44779959e-01,\n","         9.76713061e-01, 3.50757194e-02, 3.19185388e-02, 2.70224599e-02,\n","         6.25273711e-02, 3.36756289e-02, 7.29029565e-01, 3.24297561e-02,\n","         7.29029565e-01, 3.30058654e-02, 9.88636646e-01, 9.90142676e-01,\n","         6.25273711e-02, 1.04917513e-02, 5.02339164e-02, 4.80176214e-01,\n","         4.51205340e-02, 1.88491022e-03, 3.27341070e-03, 9.98866504e-01,\n","         3.11370338e-01, 1.18296507e-02, 2.47936711e-01, 9.97862530e-01,\n","         1.54121488e-02, 6.43143946e-01, 4.49922154e-01, 2.24925526e-02,\n","         7.63389130e-02, 2.84355412e-02, 9.21485594e-01, 9.93002078e-01,\n","         1.92334544e-02, 3.72708045e-02, 9.76170842e-01, 1.08618397e-02,\n","         9.94429522e-01, 1.53324773e-02, 4.51205340e-02, 2.66288284e-01,\n","         1.08619690e-02, 2.17460655e-03, 9.31194603e-01, 2.08423908e-01,\n","         9.80980962e-01, 8.19068399e-01, 7.33161822e-01, 9.68028455e-01,\n","         2.71191490e-02, 1.65025272e-01, 9.52948749e-01, 9.00567655e-01,\n","         2.99603863e-02, 6.76146856e-01, 9.70277393e-01, 9.90983913e-01,\n","         8.30070302e-02, 9.20661107e-01, 9.94680599e-01, 1.20809530e-01,\n","         9.91962757e-01, 3.52362612e-03, 8.67289117e-01, 3.17819976e-02,\n","         9.92178038e-01, 8.26157240e-03, 1.66185266e-02, 3.72182673e-03,\n","         2.75150407e-02, 8.31764789e-01, 9.12884022e-01, 9.95469224e-01,\n","         2.65025262e-02, 9.98962784e-01, 2.46337197e-02, 8.38932099e-01,\n","         3.00702327e-02, 7.08409065e-02, 9.85997738e-01, 8.68077517e-04,\n","         4.11119217e-03, 5.34452491e-04, 1.38969316e-01, 5.62188782e-01,\n","         9.20661107e-01, 9.90900677e-01, 8.96685925e-01, 3.92519527e-01,\n","         9.55179017e-01]),\n","  'len_features': 10,\n","  'feaute_importances': ['fare',\n","   'age',\n","   'sibsp',\n","   'pclass',\n","   'embarked_S',\n","   'gender_female',\n","   'parch',\n","   'embarked_C',\n","   'embarked_Q',\n","   'gender_male'],\n","  'create_dt': '0217'}]"]},"metadata":{},"execution_count":216}],"source":["args.results.append(\n","    {\n","        'model': 'modelV4',\n","        'score_tr': score_tr,\n","        'score_te': score_te,\n","        'auc_te': auc_te,\n","        'ori_te_pred': ori_te_pred,\n","        'len_features': X_tr.shape[1],\n","        'feaute_importances': list(df_feature_importances['index'].values[:X_tr.shape[1]]),\n","        'create_dt': '0217'\n","    }\n",")\n","\n","args.results"]},{"cell_type":"markdown","metadata":{"id":"IvhHDW2a4PXj"},"source":["# Submission"]},{"cell_type":"code","execution_count":227,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":89},"executionInfo":{"elapsed":358,"status":"ok","timestamp":1724830730483,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"dRH3EPQt25r7","outputId":"4966a540-cddf-494e-f8e8-5a2db84d7a45"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     model  score_tr  score_te   auc_te  \\\n","0  modelV4  0.954758  0.832727  0.91602   \n","\n","                                         ori_te_pred  len_features  \\\n","0  [0.6107041261593675, 0.980944014428271, 0.9206...            10   \n","\n","                                  feaute_importances create_dt  \n","0  [fare, age, sibsp, pclass, embarked_S, gender_...      0217  "],"text/html":["\n","  <div id=\"df-59a8cef9-5e96-4e45-8c75-11cab2dd0640\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_tr</th>\n","      <th>score_te</th>\n","      <th>auc_te</th>\n","      <th>ori_te_pred</th>\n","      <th>len_features</th>\n","      <th>feaute_importances</th>\n","      <th>create_dt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>modelV4</td>\n","      <td>0.954758</td>\n","      <td>0.832727</td>\n","      <td>0.91602</td>\n","      <td>[0.6107041261593675, 0.980944014428271, 0.9206...</td>\n","      <td>10</td>\n","      <td>[fare, age, sibsp, pclass, embarked_S, gender_...</td>\n","      <td>0217</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59a8cef9-5e96-4e45-8c75-11cab2dd0640')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-59a8cef9-5e96-4e45-8c75-11cab2dd0640 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-59a8cef9-5e96-4e45-8c75-11cab2dd0640');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_42050b31-f8a0-4472-8b67-ff730d446929\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_results')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_42050b31-f8a0-4472-8b67-ff730d446929 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_results');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results","summary":"{\n  \"name\": \"df_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"modelV4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_tr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9547581903276131,\n        \"max\": 0.9547581903276131,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9547581903276131\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8327272727272728,\n        \"max\": 0.8327272727272728,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8327272727272728\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auc_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.916020017993702,\n        \"max\": 0.916020017993702,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.916020017993702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ori_te_pred\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len_features\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10,\n        \"max\": 10,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feaute_importances\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"create_dt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0217\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":227}],"source":["df_results = pd.DataFrame(args.results).sort_values(by=['auc_te'], ascending=False)\n","df_results"]},{"cell_type":"code","execution_count":228,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1724830730810,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"KrN0fM9qNLlH","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"771f3c1b-bcd7-4302-aff4-a98166d303de"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived\n","0          916       0.5\n","1          917       0.5\n","2          918       0.5\n","3          919       0.5\n","4          920       0.5"],"text/html":["\n","  <div id=\"df-39350b93-1d2d-49f7-8c65-1da71d6ec7b2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>916</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>917</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>918</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>919</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>920</td>\n","      <td>0.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39350b93-1d2d-49f7-8c65-1da71d6ec7b2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-39350b93-1d2d-49f7-8c65-1da71d6ec7b2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-39350b93-1d2d-49f7-8c65-1da71d6ec7b2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3034f23c-48e0-4e30-b463-29e6285e2c41\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3034f23c-48e0-4e30-b463-29e6285e2c41')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3034f23c-48e0-4e30-b463-29e6285e2c41 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submission","summary":"{\n  \"name\": \"submission\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.5,\n        \"max\": 0.5,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":228}],"source":["submission = pd.read_csv(args.default_submission_csv)\n","submission.head()"]},{"cell_type":"code","execution_count":229,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1724830730811,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"1_lo3-TUL7Og","colab":{"base_uri":"https://localhost:8080/","height":381},"outputId":"938ba110-a863-4bd6-d486-fa2d5821bf81"},"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]},{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived\n","0          916  0.610704\n","1          917  0.980944\n","2          918  0.920661\n","3          919  0.050234\n","4          920  0.958159\n","5          921  0.972873\n","6          922  0.029264\n","7          923  0.076339\n","8          924  0.115426\n","9          925  0.015618"],"text/html":["\n","  <div id=\"df-fc8f4b4c-6821-454f-8f56-dce2a7553a72\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>916</td>\n","      <td>0.610704</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>917</td>\n","      <td>0.980944</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>918</td>\n","      <td>0.920661</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>919</td>\n","      <td>0.050234</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>920</td>\n","      <td>0.958159</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>921</td>\n","      <td>0.972873</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>922</td>\n","      <td>0.029264</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>923</td>\n","      <td>0.076339</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>924</td>\n","      <td>0.115426</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>925</td>\n","      <td>0.015618</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc8f4b4c-6821-454f-8f56-dce2a7553a72')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fc8f4b4c-6821-454f-8f56-dce2a7553a72 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fc8f4b4c-6821-454f-8f56-dce2a7553a72');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b875dc51-7f59-4d26-b21c-7b2b5d254018\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b875dc51-7f59-4d26-b21c-7b2b5d254018')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b875dc51-7f59-4d26-b21c-7b2b5d254018 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submission","summary":"{\n  \"name\": \"submission\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4005050760912745,\n        \"min\": 0.0005344524909368888,\n        \"max\": 0.9989843358817619,\n        \"num_unique_values\": 342,\n        \"samples\": [\n          0.08420962376353587,\n          0.2154020184950261,\n          0.10335544196407713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":229}],"source":["submission['survived'] = df_results.loc[0, ['ori_te_pred']].values[0]\n","\n","print(f'{submission.isnull().sum().sum()}')\n","submission.head(10)"]},{"cell_type":"code","execution_count":230,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1724830730811,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Px2O6OYdL7ed"},"outputs":[],"source":["submission.to_csv(args.submission_csv, header=True, index=False)"]},{"cell_type":"markdown","metadata":{"id":"bBHKc63d2Waj"},"source":["# Save Results"]},{"cell_type":"code","execution_count":231,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1724830731180,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Uxmnxqnl2aNJ","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"2e23eb84-c1e7-41ca-e66e-4a6b52171c3f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/data/MyDrive/AI_study/1. Machine Learning/3. Supervised Learning/original data/result/model_results.json'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":231}],"source":["args.save_results"]},{"cell_type":"code","execution_count":232,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1724830731181,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"104aSV_bOJKo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"836d6a16-59ea-46e8-e06a-a33b49c86bc9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['model', 'score_tr', 'score_te', 'auc_te', 'ori_te_pred',\n","       'len_features', 'feaute_importances', 'create_dt'],\n","      dtype='object')"]},"metadata":{},"execution_count":232}],"source":["df_results.columns"]},{"cell_type":"code","execution_count":233,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1724830731181,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"KT9aOigbOPVp"},"outputs":[],"source":["df_results.drop(['ori_te_pred'], axis=1, inplace=True)"]},{"cell_type":"code","execution_count":234,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1724830731182,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"xtdnf4LiOPZT"},"outputs":[],"source":["df_results.to_json(args.save_results, orient=\"records\")"]},{"cell_type":"code","execution_count":235,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1724830731182,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"3qLMRrD7PWDe","colab":{"base_uri":"https://localhost:8080/","height":81},"outputId":"860d0028-a7a9-4205-c0d5-25e7d9b1131f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     model  score_tr  score_te   auc_te  len_features  \\\n","0  modelV4  0.954758  0.832727  0.91602            10   \n","\n","                                  feaute_importances create_dt  \n","0  [fare, age, sibsp, pclass, embarked_S, gender_...      0217  "],"text/html":["\n","  <div id=\"df-633da6ff-d8ab-4e17-8a82-051d37f9ce76\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_tr</th>\n","      <th>score_te</th>\n","      <th>auc_te</th>\n","      <th>len_features</th>\n","      <th>feaute_importances</th>\n","      <th>create_dt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>modelV4</td>\n","      <td>0.954758</td>\n","      <td>0.832727</td>\n","      <td>0.91602</td>\n","      <td>10</td>\n","      <td>[fare, age, sibsp, pclass, embarked_S, gender_...</td>\n","      <td>0217</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-633da6ff-d8ab-4e17-8a82-051d37f9ce76')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-633da6ff-d8ab-4e17-8a82-051d37f9ce76 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-633da6ff-d8ab-4e17-8a82-051d37f9ce76');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results","summary":"{\n  \"name\": \"df_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"modelV4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_tr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9547581903276131,\n        \"max\": 0.9547581903276131,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9547581903276131\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8327272727272728,\n        \"max\": 0.8327272727272728,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8327272727272728\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auc_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.916020017993702,\n        \"max\": 0.916020017993702,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.916020017993702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len_features\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10,\n        \"max\": 10,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feaute_importances\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"create_dt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0217\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":235}],"source":["# 어떤 모델이 일을 잘했는지 확인 가능\n","df_results.head()"]},{"cell_type":"code","execution_count":236,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1724830731182,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"MJABjgAx2gOY","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5c705b85-d48b-480d-f643-c46692f6f196"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'model': 'modelV4',\n","  'score_tr': 0.9547581903,\n","  'score_te': 0.8327272727,\n","  'auc_te': 0.916020018,\n","  'len_features': 10,\n","  'feaute_importances': ['fare',\n","   'age',\n","   'sibsp',\n","   'pclass',\n","   'embarked_S',\n","   'gender_female',\n","   'parch',\n","   'embarked_C',\n","   'embarked_Q',\n","   'gender_male'],\n","  'create_dt': '0217'}]"]},"metadata":{},"execution_count":236}],"source":["import json\n","\n","load_results = None\n","with open(args.save_results, 'r') as file:\n","    load_results = json.load(file)\n","\n","load_results"]},{"cell_type":"code","execution_count":237,"metadata":{"executionInfo":{"elapsed":1362,"status":"ok","timestamp":1724830732536,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Fb9kcDEJQWvy","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"1ea14ae2-f131-4c7f-f820-ed204f1f0f47"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n"]},{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[0.87134503 0.12865497]\n"," [0.23076923 0.76923077]]\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n","WARNING:matplotlib.font_manager:findfont: Font family 'NanumBarunGothic' not found.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{"image/png":{"width":723,"height":587}}}],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# 예시 데이터 (실제 데이터로 교체하세요)\n","actual = y_te\n","predict = y_pred  # 예측값\n","\n","# 임계값 설정\n","threshold = 0.5\n","predict_binary = (predict >= threshold).astype(int)\n","\n","# Confusion Matrix 계산\n","cm = confusion_matrix(actual, predict_binary, normalize=\"true\")\n","\n","# Confusion Matrix 출력\n","print(\"Confusion Matrix:\")\n","print(cm)\n","\n","# 시각화\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, cmap=\"Blues\", xticklabels=[\"Predicted 0\", \"Predicted 1\"], yticklabels=[\"Actual 0\", \"Actual 1\"])\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Label\")\n","plt.ylabel(\"Actual Label\")\n","plt.show()\n"]}],"metadata":{"colab":{"collapsed_sections":["vpsOAPWLUTnq","lnWjgSKSU_v6","A6vblT6FV9AL","rLL_5f3yW1w6","X-EAHwGMae1r","RviCGGxH1kHt","bBHKc63d2Waj"],"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}