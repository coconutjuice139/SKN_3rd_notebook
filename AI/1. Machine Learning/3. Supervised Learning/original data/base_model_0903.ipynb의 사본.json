{"cells":[{"cell_type":"markdown","metadata":{"id":"vpsOAPWLUTnq"},"source":["# Connect to google account"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2321,"status":"ok","timestamp":1725321482738,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"kse6YZgdRp-B","outputId":"0dec771a-5fe0-4982-aad3-c9d14bbf77fd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/data; to attempt to forcibly remount, call drive.mount(\"/content/data\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/data')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13351,"status":"ok","timestamp":1725321496087,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"iaBj_icIUeBC","outputId":"52300fac-a5e5-4e04-928d-c7477b58554b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","fonts-nanum is already the newest version (20200506-1).\n","0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/usr/share/fonts/truetype: skipping, looped directory detected\n","/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n","/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n","/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}],"source":["# 코렙 한글깨짐 방지\n","!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf\n","\n","# 데이터 시각화에 사용할 라이브러리\n","import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","import seaborn as sns\n","\n","# 브라우저에서 바로 그려지도록\n","%matplotlib inline\n","\n","# 그래프에 retina display 적용\n","%config InlineBackend.figure_format = 'retina'\n","\n","# Colab 의 한글 폰트 설정\n","plt.rc('font', family='NanumBarunGothic')\n","\n","# 유니코드에서  음수 부호설정\n","mpl.rc('axes', unicode_minus=False)"]},{"cell_type":"markdown","metadata":{"id":"fZzXY9Z9UtEq"},"source":["# Global Variables"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"k3l5qkpPJpwK","executionInfo":{"status":"ok","timestamp":1725321753817,"user_tz":-540,"elapsed":306,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import random\n","import torch\n","\n","def reset_seeds(seed=500):\n","  random.seed(seed)\n","  os.environ['PYTHONHASHSEED'] = str(seed)    # 파이썬 환경변수 시드 고정\n","  np.random.seed(seed)\n","  torch.manual_seed(seed) # cpu 연산 무작위 고정\n","  torch.cuda.manual_seed(seed) # gpu 연산 무작위 고정\n","  torch.backends.cudnn.deterministic = True  # cuda 라이브러리에서 Deterministic(결정론적)으로 예측하기 (예측에 대한 불확실성 제거 )"]},{"cell_type":"code","execution_count":62,"metadata":{"id":"QmedNTnmUo8H","executionInfo":{"status":"ok","timestamp":1725321754116,"user_tz":-540,"elapsed":3,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["import easydict\n","args = easydict.EasyDict()\n","\n","# path 정보\n","args.default_path = '/content/data/MyDrive/AI_study/1. Machine Learning/3. Supervised Learning/original data/'\n","args.train_csv = args.default_path+'train.csv'\n","args.test_csv = args.default_path+'test.csv'\n","args.default_submission_csv = args.default_path+'submission.csv'\n","\n","args.submission_csv = args.default_path+'result/submission_0903_2.csv'\n","args.save_results = args.default_path+\"result/model_results.json\"\n","\n","# 데이터 분석을 위한 변수들\n","args.random_state = 50 # 위의 셀에서 고정 시킴\n","args.results = []"]},{"cell_type":"markdown","metadata":{"id":"lnWjgSKSU_v6"},"source":["# Load Tritanic"]},{"cell_type":"markdown","metadata":{"id":"Nzq3WC3XVFYJ"},"source":["- Surived:0=사망, 1=생존\n","- Pclass: 1=1등석, 2=2등석, 3=3등석\n","- gender:male=남성, female=여성\n","- Age: 나이\n","- SibSp: 타이타닉 호에 동승한 자매/배우자의 수\n","- Parch: 타이타닉 호에 동승한 부모/자식의 수\n","- Ticket: 티켓 번호\n","- Fare: 승객 요금\n","- Cabin: 방 호수\n","- Embarked: 탑승지; C=셰르부르, Q=퀴즈타운, S=사우샘프턴"]},{"cell_type":"code","execution_count":63,"metadata":{"id":"uVs7ZAJOU9yp","executionInfo":{"status":"ok","timestamp":1725321754772,"user_tz":-540,"elapsed":11,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","plt.style.use('fivethirtyeight')\n","plt.ion()\n","\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":64,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvgiIYX3VVc_","outputId":"b99d68d8-cefa-4ce7-ad8d-e2b85b58c72b","executionInfo":{"status":"ok","timestamp":1725321754772,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((916, 12), (393, 11))"]},"metadata":{},"execution_count":64}],"source":["ori_train = pd.read_csv(args.train_csv)\n","ori_test = pd.read_csv(args.test_csv)\n","\n","ori_train.shape, ori_test.shape"]},{"cell_type":"code","execution_count":65,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iJtJNQalaV9x","outputId":"6da5a79d-bead-47fb-b6ee-18e6428a834b","executionInfo":{"status":"ok","timestamp":1725321754772,"user_tz":-540,"elapsed":9,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(393, 2)"]},"metadata":{},"execution_count":65}],"source":["pd.read_csv(args.default_submission_csv).shape"]},{"cell_type":"code","execution_count":66,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cIUfEFrnVfHg","outputId":"1c6c3946-4cb1-4847-b8ce-8756a28c2dbe","executionInfo":{"status":"ok","timestamp":1725321754772,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['passengerid', 'survived', 'pclass', 'name', 'gender', 'age', 'sibsp',\n","       'parch', 'ticket', 'fare', 'cabin', 'embarked'],\n","      dtype='object')"]},"metadata":{},"execution_count":66}],"source":["ori_train.columns"]},{"cell_type":"code","execution_count":67,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"M7YA99udy6bW","outputId":"39c51bac-2137-4538-97e8-393269f14764","executionInfo":{"status":"ok","timestamp":1725321754772,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived  pclass  \\\n","0            0         0       2   \n","1            1         0       3   \n","2            2         1       1   \n","3            3         1       3   \n","4            4         0       2   \n","\n","                                                name  gender   age  sibsp  \\\n","0                     Wheeler, Mr. Edwin Frederick\"\"    male   NaN      0   \n","1                                 Henry, Miss. Delia  female   NaN      0   \n","2  Hays, Mrs. Charles Melville (Clara Jennings Gr...  female  52.0      1   \n","3       Andersson, Mr. August Edvard (\"Wennerstrom\")    male  27.0      0   \n","4                                  Hold, Mr. Stephen    male  44.0      1   \n","\n","   parch         ticket     fare cabin embarked  \n","0      0  SC/PARIS 2159  12.8750   NaN        S  \n","1      0         382649   7.7500   NaN        Q  \n","2      1          12749  93.5000   B69        S  \n","3      0         350043   7.7958   NaN        S  \n","4      0          26707  26.0000   NaN        S  "],"text/html":["\n","  <div id=\"df-cb9ee6b6-732f-4e74-8707-d1357a4be426\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Wheeler, Mr. Edwin Frederick\"\"</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SC/PARIS 2159</td>\n","      <td>12.8750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Henry, Miss. Delia</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>382649</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n","      <td>female</td>\n","      <td>52.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12749</td>\n","      <td>93.5000</td>\n","      <td>B69</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Andersson, Mr. August Edvard (\"Wennerstrom\")</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>350043</td>\n","      <td>7.7958</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Hold, Mr. Stephen</td>\n","      <td>male</td>\n","      <td>44.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26707</td>\n","      <td>26.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb9ee6b6-732f-4e74-8707-d1357a4be426')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cb9ee6b6-732f-4e74-8707-d1357a4be426 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cb9ee6b6-732f-4e74-8707-d1357a4be426');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8bb52252-c1c9-4631-a590-653003d0f70f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8bb52252-c1c9-4631-a590-653003d0f70f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8bb52252-c1c9-4631-a590-653003d0f70f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_train","summary":"{\n  \"name\": \"ori_train\",\n  \"rows\": 916,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264,\n        \"min\": 0,\n        \"max\": 915,\n        \"num_unique_values\": 916,\n        \"samples\": [\n          380,\n          879,\n          355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 915,\n        \"samples\": [\n          \"Hocking, Mr. Richard George\",\n          \"Collyer, Mr. Harvey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.185627316833022,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          7.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 703,\n        \"samples\": [\n          \"233478\",\n          \"113780\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.506410537600836,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          25.7,\n          7.2292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"B45\",\n          \"B79\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":67}],"source":["ori_train.head()"]},{"cell_type":"code","execution_count":68,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ySaIXiswVlMR","outputId":"e1dc6128-7da8-4ce0-a077-6ce26af7fc02","executionInfo":{"status":"ok","timestamp":1725321754772,"user_tz":-540,"elapsed":6,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(916, 916)"]},"metadata":{},"execution_count":68}],"source":["ori_train['passengerid'].nunique(), ori_train.shape[0]"]},{"cell_type":"code","execution_count":69,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"No3vTz4AVuFo","outputId":"edb53778-7bb5-417d-ff72-9c2c2cdc35c9","executionInfo":{"status":"ok","timestamp":1725321755067,"user_tz":-540,"elapsed":300,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   survived  pclass                                               name  \\\n","0         0       2                     Wheeler, Mr. Edwin Frederick\"\"   \n","1         0       3                                 Henry, Miss. Delia   \n","2         1       1  Hays, Mrs. Charles Melville (Clara Jennings Gr...   \n","3         1       3       Andersson, Mr. August Edvard (\"Wennerstrom\")   \n","4         0       2                                  Hold, Mr. Stephen   \n","\n","   gender   age  sibsp  parch         ticket     fare cabin embarked  \n","0    male   NaN      0      0  SC/PARIS 2159  12.8750   NaN        S  \n","1  female   NaN      0      0         382649   7.7500   NaN        Q  \n","2  female  52.0      1      1          12749  93.5000   B69        S  \n","3    male  27.0      0      0         350043   7.7958   NaN        S  \n","4    male  44.0      1      0          26707  26.0000   NaN        S  "],"text/html":["\n","  <div id=\"df-49a0b2bc-7336-475d-8edc-a9c19d0c8618\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>survived</th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Wheeler, Mr. Edwin Frederick\"\"</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SC/PARIS 2159</td>\n","      <td>12.8750</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Henry, Miss. Delia</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>382649</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Hays, Mrs. Charles Melville (Clara Jennings Gr...</td>\n","      <td>female</td>\n","      <td>52.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12749</td>\n","      <td>93.5000</td>\n","      <td>B69</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Andersson, Mr. August Edvard (\"Wennerstrom\")</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>350043</td>\n","      <td>7.7958</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Hold, Mr. Stephen</td>\n","      <td>male</td>\n","      <td>44.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26707</td>\n","      <td>26.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49a0b2bc-7336-475d-8edc-a9c19d0c8618')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-49a0b2bc-7336-475d-8edc-a9c19d0c8618 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-49a0b2bc-7336-475d-8edc-a9c19d0c8618');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-17bb2f29-68a6-4cf5-8004-4de7d78f6536\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17bb2f29-68a6-4cf5-8004-4de7d78f6536')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-17bb2f29-68a6-4cf5-8004-4de7d78f6536 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_train","summary":"{\n  \"name\": \"ori_train\",\n  \"rows\": 916,\n  \"fields\": [\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 915,\n        \"samples\": [\n          \"Hocking, Mr. Richard George\",\n          \"Collyer, Mr. Harvey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.185627316833022,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 92,\n        \"samples\": [\n          7.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 703,\n        \"samples\": [\n          \"233478\",\n          \"113780\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.506410537600836,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 251,\n        \"samples\": [\n          25.7,\n          7.2292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 146,\n        \"samples\": [\n          \"B45\",\n          \"B79\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":69}],"source":["ori_train.drop('passengerid', axis=1, inplace=True)\n","ori_train.head()"]},{"cell_type":"code","execution_count":70,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"xFmCng-XEKi7","outputId":"1a4dc4bc-e725-40a5-e2f4-e7f622321140","executionInfo":{"status":"ok","timestamp":1725321755067,"user_tz":-540,"elapsed":5,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(393, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["             pclass                                        name  gender   age  \\\n","passengerid                                                                     \n","916               3                 McGowan, Miss. Anna \"Annie\"  female  15.0   \n","917               2                         Pinsky, Mrs. (Rosa)  female  32.0   \n","918               3           McCarthy, Miss. Catherine Katie\"\"  female   NaN   \n","919               3      Franklin, Mr. Charles (Charles Fardon)    male   NaN   \n","920               1  Wick, Mrs. George Dennick (Mary Hitchcock)  female  45.0   \n","\n","             sibsp  parch              ticket      fare cabin embarked  \n","passengerid                                                             \n","916              0      0              330923    8.0292   NaN        Q  \n","917              0      0              234604   13.0000   NaN        S  \n","918              0      0              383123    7.7500   NaN        Q  \n","919              0      0  SOTON/O.Q. 3101314    7.2500   NaN        S  \n","920              1      1               36928  164.8667   NaN        S  "],"text/html":["\n","  <div id=\"df-852b86f3-ea89-47af-abea-47549f5d182e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pclass</th>\n","      <th>name</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>ticket</th>\n","      <th>fare</th>\n","      <th>cabin</th>\n","      <th>embarked</th>\n","    </tr>\n","    <tr>\n","      <th>passengerid</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>916</th>\n","      <td>3</td>\n","      <td>McGowan, Miss. Anna \"Annie\"</td>\n","      <td>female</td>\n","      <td>15.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330923</td>\n","      <td>8.0292</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>917</th>\n","      <td>2</td>\n","      <td>Pinsky, Mrs. (Rosa)</td>\n","      <td>female</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>234604</td>\n","      <td>13.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>918</th>\n","      <td>3</td>\n","      <td>McCarthy, Miss. Catherine Katie\"\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>383123</td>\n","      <td>7.7500</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>919</th>\n","      <td>3</td>\n","      <td>Franklin, Mr. Charles (Charles Fardon)</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>SOTON/O.Q. 3101314</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>920</th>\n","      <td>1</td>\n","      <td>Wick, Mrs. George Dennick (Mary Hitchcock)</td>\n","      <td>female</td>\n","      <td>45.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>36928</td>\n","      <td>164.8667</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-852b86f3-ea89-47af-abea-47549f5d182e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-852b86f3-ea89-47af-abea-47549f5d182e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-852b86f3-ea89-47af-abea-47549f5d182e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f78aba06-a8e1-4a5f-8fcd-727855061bcf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f78aba06-a8e1-4a5f-8fcd-727855061bcf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f78aba06-a8e1-4a5f-8fcd-727855061bcf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ori_test","summary":"{\n  \"name\": \"ori_test\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 393,\n        \"samples\": [\n          \"Spector, Mr. Woolf\",\n          \"Mernagh, Mr. Robert\",\n          \"Kraeff, Mr. Theodor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.955055573706593,\n        \"min\": 0.42,\n        \"max\": 67.0,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          28.0,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 345,\n        \"samples\": [\n          \"2628\",\n          \"C.A. 6212\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.58265418051246,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 168,\n        \"samples\": [\n          32.5,\n          39.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 86,\n        \"samples\": [\n          \"B77\",\n          \"E38\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Q\",\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":70}],"source":["ori_test.set_index(['passengerid'], inplace=True)\n","print(f'{ori_test.shape}')\n","ori_test.head()"]},{"cell_type":"markdown","metadata":{"id":"A6vblT6FV9AL"},"source":["# train_test_split"]},{"cell_type":"code","execution_count":71,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"JjOQ9IMMWPj0","outputId":"c3d9ffb7-0735-4afc-a7ea-f8b8abe43b1d","executionInfo":{"status":"ok","timestamp":1725321756024,"user_tz":-540,"elapsed":12,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            counts     freqs\n","categories                  \n","Died           570  0.622271\n","Survived       346  0.377729"],"text/html":["\n","  <div id=\"df-ce19417a-5ab7-49db-9014-144f52f48821\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>counts</th>\n","      <th>freqs</th>\n","    </tr>\n","    <tr>\n","      <th>categories</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Died</th>\n","      <td>570</td>\n","      <td>0.622271</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>346</td>\n","      <td>0.377729</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce19417a-5ab7-49db-9014-144f52f48821')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ce19417a-5ab7-49db-9014-144f52f48821 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ce19417a-5ab7-49db-9014-144f52f48821');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dd6829fc-70fa-43e6-a3ac-eb588e965661\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd6829fc-70fa-43e6-a3ac-eb588e965661')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dd6829fc-70fa-43e6-a3ac-eb588e965661 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"new_survived\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"categories\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Survived\",\n          \"Died\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"counts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 158,\n        \"min\": 346,\n        \"max\": 570,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          346,\n          570\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freqs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1729169421242212,\n        \"min\": 0.3777292576419214,\n        \"max\": 0.6222707423580786,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.3777292576419214,\n          0.6222707423580786\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":71}],"source":["new_survived = pd.Categorical(ori_train[\"survived\"])\n","new_survived = new_survived.rename_categories([\"Died\",\"Survived\"])\n","\n","new_survived.describe()"]},{"cell_type":"code","execution_count":72,"metadata":{"id":"koeYL3h2V2Ks","executionInfo":{"status":"ok","timestamp":1725321756024,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":73,"metadata":{"id":"7PbKWXGgDQ3w","executionInfo":{"status":"ok","timestamp":1725321756024,"user_tz":-540,"elapsed":9,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":["y = ori_train['survived']\n","X = ori_train.drop(['survived'], axis=1)"]},{"cell_type":"code","execution_count":74,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PKVlYZkjWCWC","executionInfo":{"status":"ok","timestamp":1725321756025,"user_tz":-540,"elapsed":10,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"ff075ffb-7e4c-4cc0-ce63-86ff4d739264"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((732, 10), (184, 10), (732,), (184,))"]},"metadata":{},"execution_count":74}],"source":["reset_seeds()\n","X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.2, stratify=ori_train['survived'])\n","\n","X_tr.shape, X_te.shape, y_tr.shape, y_te.shape"]},{"cell_type":"code","execution_count":74,"metadata":{"id":"AlYwj8piNfKz","executionInfo":{"status":"ok","timestamp":1725321756025,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"rLL_5f3yW1w6"},"source":["# Base ModelV0"]},{"cell_type":"code","execution_count":75,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1725321757210,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"gk5uK32pWxw5","outputId":"135a4c41-8fc8-43c5-a5d2-418457383c93"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((732, 10), (184, 10), (393, 10))"]},"metadata":{},"execution_count":75}],"source":["train = X_tr.copy()\n","test = X_te.copy()\n","ori_te = ori_test.copy()\n","\n","train.shape, test.shape, ori_te.shape"]},{"cell_type":"markdown","metadata":{"id":"if2WMXAMXC9h"},"source":["## Data Preprocessing"]},{"cell_type":"code","execution_count":76,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1725321757210,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"VAaFr2cnXA1E","outputId":"45142661-cc35-48fa-d3c5-8eb7bbb6bf7e"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 732 entries, 12 to 731\n","Data columns (total 10 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   pclass    732 non-null    int64  \n"," 1   name      732 non-null    object \n"," 2   gender    732 non-null    object \n"," 3   age       587 non-null    float64\n"," 4   sibsp     732 non-null    int64  \n"," 5   parch     732 non-null    int64  \n"," 6   ticket    732 non-null    object \n"," 7   fare      732 non-null    float64\n"," 8   cabin     166 non-null    object \n"," 9   embarked  731 non-null    object \n","dtypes: float64(2), int64(3), object(5)\n","memory usage: 62.9+ KB\n"]}],"source":["train.info()"]},{"cell_type":"markdown","metadata":{"id":"vxYO1NrXXMtx"},"source":["drop columns"]},{"cell_type":"code","execution_count":77,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1725321757210,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"BMAMzgzhXKEM","outputId":"b6c862aa-ac8d-4936-fec8-540f1415f044"},"outputs":[{"output_type":"stream","name":"stdout","text":["before: (732, 10) / (184, 10)\n","after: (732, 7) / (184, 7)\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 732 entries, 12 to 731\n","Data columns (total 7 columns):\n"," #   Column    Non-Null Count  Dtype  \n","---  ------    --------------  -----  \n"," 0   pclass    732 non-null    int64  \n"," 1   gender    732 non-null    object \n"," 2   age       587 non-null    float64\n"," 3   sibsp     732 non-null    int64  \n"," 4   parch     732 non-null    int64  \n"," 5   fare      732 non-null    float64\n"," 6   embarked  731 non-null    object \n","dtypes: float64(2), int64(3), object(2)\n","memory usage: 45.8+ KB\n"]}],"source":["print(f'before: {train.shape} / {test.shape}')\n","drop_cols = ['name', 'ticket', 'cabin']\n","\n","train.drop(drop_cols, axis=1, inplace=True) # 모델이 학습하는데 사용하는 데이터\n","test.drop(drop_cols, axis=1, inplace=True) # 모델의 학습을 평가(잘했는지?? 못했는지??)하기 위한 데이터\n","ori_te.drop(drop_cols, axis=1, inplace=True) # 학습이 잘된 모델을 이용해서 내가 알고 싶은(ori_te) 데이터를 예측하게 하는 것\n","\n","print(f'after: {train.shape} / {test.shape}')\n","train.info()"]},{"cell_type":"markdown","metadata":{"id":"-MC0A5GjXZex"},"source":["missing value"]},{"cell_type":"code","execution_count":78,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1725321757210,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"7Sz-hgEuXV8_","outputId":"2133c751-36ae-4bb4-fcb6-af7fe770350a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass        0\n","gender        0\n","age         145\n","sibsp         0\n","parch         0\n","fare          0\n","embarked      1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>145</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":78}],"source":["train.isnull().sum()"]},{"cell_type":"code","execution_count":79,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1725321757210,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"vczgi273XfAU","outputId":"67e6394a-5d6a-4263-88cb-4bec276b0033"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass       0\n","gender       0\n","age         35\n","sibsp        0\n","parch        0\n","fare         0\n","embarked     0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>35</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":79}],"source":["test.isnull().sum()"]},{"cell_type":"code","execution_count":80,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1725321757210,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"zlp5VXiLCLrR","outputId":"f95c0392-05a3-4b57-9153-2c8f9ce1daef"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pclass       0\n","gender       0\n","age         83\n","sibsp        0\n","parch        0\n","fare         1\n","embarked     1\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>age</th>\n","      <td>83</td>\n","    </tr>\n","    <tr>\n","      <th>sibsp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fare</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>embarked</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":80}],"source":["ori_te.isnull().sum()"]},{"cell_type":"code","execution_count":81,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1725321757211,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Xzm5OVHLXhAv","outputId":"b55d766a-6661-4d8d-87db-be7e22155ed7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(28.0, 14.76665, 'S')"]},"metadata":{},"execution_count":81}],"source":["age_median = train['age'].median()\n","fare_median = train['fare'].median()\n","embarked_mode = train['embarked'].mode().values[0]\n","\n","age_median, fare_median, embarked_mode"]},{"cell_type":"code","execution_count":82,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1725321757211,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"zr6q6vb1XqrG","outputId":"c1ab2e4d-55d6-4f0c-88d7-a2def857685d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 0, 0)"]},"metadata":{},"execution_count":82}],"source":["train['age'].fillna(age_median, inplace=True)\n","test['age'].fillna(age_median, inplace=True)\n","ori_te['age'].fillna(age_median, inplace=True)\n","\n","train['fare'].fillna(fare_median, inplace=True)\n","test['fare'].fillna(fare_median, inplace=True)\n","ori_te['fare'].fillna(fare_median, inplace=True)\n","\n","train['embarked'].fillna(embarked_mode, inplace=True)\n","test['embarked'].fillna(embarked_mode, inplace=True)\n","ori_te['embarked'].fillna(embarked_mode, inplace=True)\n","\n","train.isnull().sum().sum(), test.isnull().sum().sum(), ori_te.isnull().sum().sum()"]},{"cell_type":"markdown","metadata":{"id":"eUYyVFT4YOLY"},"source":["data encoding"]},{"cell_type":"code","execution_count":83,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1725321757211,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"vxsmYuiZYJ3i"},"outputs":[],"source":["from sklearn.preprocessing import OneHotEncoder"]},{"cell_type":"code","execution_count":84,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1725321757211,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"fKxuPwvGz69n","outputId":"00f2700e-24a7-4c0c-acb7-3f2de2a7c4a6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['pclass', 'gender', 'age', 'sibsp', 'parch', 'fare', 'embarked'], dtype='object')"]},"metadata":{},"execution_count":84}],"source":["train.columns"]},{"cell_type":"code","execution_count":85,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1725321757211,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"ijwMCjMbYTFE","outputId":"f79531a8-5973-4bee-cb65-aa76795f846f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['sibsp', 'parch', 'age', 'pclass', 'fare']"]},"metadata":{},"execution_count":85}],"source":["enc_cols = ['gender', 'embarked']\n","normal_cols = list(set(train.columns) - set(enc_cols))\n","normal_cols"]},{"cell_type":"code","execution_count":86,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":242},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1725321757211,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"973B2IbhYdWK","outputId":"4f9ba69d-b3a1-4bb7-fe19-cae9a6a88dd9"},"outputs":[{"output_type":"stream","name":"stdout","text":["before: (732, 7) / (184, 7)\n","after: (732, 10) / (184, 10)\n"]},{"output_type":"execute_result","data":{"text/plain":["   sibsp  parch   age  pclass     fare  gender_female  gender_male  \\\n","0      0      0  30.0       2  13.0000            1.0          0.0   \n","1      0      0  28.0       2   0.0000            0.0          1.0   \n","2      0      0  21.0       3   8.4333            0.0          1.0   \n","3      0      0  18.0       2  13.0000            0.0          1.0   \n","4      1      0  19.0       3  16.1000            1.0          0.0   \n","\n","   embarked_C  embarked_Q  embarked_S  \n","0         0.0         0.0         1.0  \n","1         0.0         0.0         1.0  \n","2         0.0         0.0         1.0  \n","3         0.0         0.0         1.0  \n","4         0.0         0.0         1.0  "],"text/html":["\n","  <div id=\"df-b031c929-9d4c-41a8-ac92-c13e2eecb21b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sibsp</th>\n","      <th>parch</th>\n","      <th>age</th>\n","      <th>pclass</th>\n","      <th>fare</th>\n","      <th>gender_female</th>\n","      <th>gender_male</th>\n","      <th>embarked_C</th>\n","      <th>embarked_Q</th>\n","      <th>embarked_S</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0</td>\n","      <td>2</td>\n","      <td>13.0000</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>28.0</td>\n","      <td>2</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>21.0</td>\n","      <td>3</td>\n","      <td>8.4333</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>18.0</td>\n","      <td>2</td>\n","      <td>13.0000</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>19.0</td>\n","      <td>3</td>\n","      <td>16.1000</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b031c929-9d4c-41a8-ac92-c13e2eecb21b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b031c929-9d4c-41a8-ac92-c13e2eecb21b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b031c929-9d4c-41a8-ac92-c13e2eecb21b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7c681bf6-48f7-4aff-a8a4-9b605a7b07b4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c681bf6-48f7-4aff-a8a4-9b605a7b07b4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7c681bf6-48f7-4aff-a8a4-9b605a7b07b4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"enc_tr","summary":"{\n  \"name\": \"enc_tr\",\n  \"rows\": 732,\n  \"fields\": [\n    {\n      \"column\": \"sibsp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2,\n          5,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.825600866552634,\n        \"min\": 0.17,\n        \"max\": 80.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          50.0,\n          55.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.96053261677658,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 234,\n        \"samples\": [\n          15.05,\n          8.3,\n          27.4458\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_female\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4772096639983251,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_male\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4772096639983251,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4059023463016288,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_Q\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28661231919712116,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embarked_S\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4576100747163037,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":86}],"source":["print(f'before: {train.shape} / {test.shape}')\n","\n","enc = OneHotEncoder()\n","# train\n","tmp_tr = pd.DataFrame(\n","    enc.fit_transform(train[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_tr = pd.concat(\n","    [train[normal_cols].reset_index(drop=True), tmp_tr.reset_index(drop=True)]\n","    , axis=1\n",")\n","# test\n","tmp_te = pd.DataFrame(\n","    enc.transform(test[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_te = pd.concat(\n","    [test[normal_cols].reset_index(drop=True), tmp_te.reset_index(drop=True)]\n","    , axis=1\n",")\n","# ori_test\n","tmp_te = pd.DataFrame(\n","    enc.transform(ori_te[enc_cols]).toarray(),\n","    columns = enc.get_feature_names_out()\n",")\n","enc_ori_te = pd.concat(\n","    [ori_te[normal_cols].reset_index(drop=True), tmp_te.reset_index(drop=True)]\n","    , axis=1\n",")\n","\n","print(f'after: {enc_tr.shape} / {enc_te.shape}')\n","enc_tr.head()"]},{"cell_type":"code","execution_count":87,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":609},"executionInfo":{"elapsed":969,"status":"ok","timestamp":1725321758172,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"oAo317YadSER","outputId":"1a845c3d-8096-4962-a36e-1c77d732b022"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{"image/png":{"width":959,"height":592}}}],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","\n","# Fare 컬럼의 분포를 시각화\n","plt.figure(figsize=(10, 6))\n","sns.histplot(enc_tr['fare'], bins=50, kde=True)\n","plt.title('Distribution of Fare in Titanic Dataset')\n","plt.xlabel('Fare')\n","plt.ylabel('Frequency')\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"X-EAHwGMae1r"},"source":["## Training"]},{"cell_type":"code","execution_count":88,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1725321758172,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"TtAqy9dTaMzr","outputId":"2943cf23-ae6a-4041-d6aa-b75aaeb26e70"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 0, 0)"]},"metadata":{},"execution_count":88}],"source":["enc_tr.isnull().sum().sum(), enc_te.isnull().sum().sum(), enc_ori_te.isnull().sum().sum()"]},{"cell_type":"code","execution_count":89,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1725321758172,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"lyM1TD6fEz-8","outputId":"23cda322-750e-44fa-dc34-e50cd6eeae6d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((732, 10), (184, 10), (393, 10))"]},"metadata":{},"execution_count":89}],"source":["enc_tr.shape, enc_te.shape, enc_ori_te.shape"]},{"cell_type":"code","execution_count":90,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1725321758172,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"-G1JIMZra-r9"},"outputs":[],"source":["from lightgbm import LGBMClassifier"]},{"cell_type":"code","source":["!pip install optuna"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ge8f7i7_IkaK","executionInfo":{"status":"ok","timestamp":1725321760938,"user_tz":-540,"elapsed":2773,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"4f21e6ac-30e2-46af-d472-7f402ebf8c2a"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (4.0.0)\n","Requirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (1.13.2)\n","Requirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna) (6.8.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.1)\n","Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.32)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.5)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.2)\n","Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (1.3.5)\n","Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.12.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna) (3.0.3)\n","Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (2.1.5)\n"]}]},{"cell_type":"code","source":["import optuna\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import roc_auc_score\n","from sklearn.model_selection import KFold"],"metadata":{"id":"lpjfNTfrIlTU","executionInfo":{"status":"ok","timestamp":1725321760938,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"execution_count":92,"outputs":[]},{"cell_type":"code","source":["from optuna.samplers import TPESampler\n","optuna.logging.disable_default_handler()"],"metadata":{"id":"GApStwWUIlQg","executionInfo":{"status":"ok","timestamp":1725321760938,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"execution_count":93,"outputs":[]},{"cell_type":"code","source":["class Objective:\n","    def __init__(self,x_train,y_train,seed):\n","        self.x_train = x_train\n","        self.y_train = y_train\n","        self.seed = seed\n","        num_folds=2 # 학습시간을 줄이기 위해 2로 하였다. 일반적으로는 5\n","        self.cv = KFold(n_splits=num_folds,shuffle=True,random_state=self.seed)\n","    def __call__(self,trial):\n","        hp = {\n","            \"max_depth\" : trial.suggest_int(\"max_depth\",2,5),\n","            \"min_samples_split\" : trial.suggest_int(\"min_samples_split\",2,5),\n","            \"criterion\" : trial.suggest_categorical(\"criterion\",[\"gini\",\"entropy\"]),\n","            \"max_leaf_nodes\" : trial.suggest_int(\"max_leaf_nodes\",5,10),\n","            \"n_estimators\" : trial.suggest_int(\"n_estimators\",10,500,50),\n","            \"learning_rate\" : trial.suggest_float(\"learning_rate\",0.01,0.1)\n","        }\n","        model = LGBMClassifier(random_state=self.seed,**hp)\n","        scores = cross_val_score(model,self.x_train,self.y_train, cv = self.cv , scoring=\"roc_auc\")\n","        return np.mean(scores)"],"metadata":{"id":"_r1-Mm9QIlOF","executionInfo":{"status":"ok","timestamp":1725321760939,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"execution_count":94,"outputs":[]},{"cell_type":"code","source":["sampler = TPESampler(seed=args.random_state) # 대체모델 부분\n","\n","# 스터디 객체\n","study = optuna.create_study(\n","    direction = \"maximize\", # maximize or minimize\n","    sampler = sampler,\n","    # \"verbose\" : -1 # warning 제거\n",")\n","objective = Objective(enc_tr,y_tr,args.random_state)\n","study.optimize(objective,n_trials=100)\n","\n","print(\"Best Score:\", study.best_value) # 최고점수\n","print(\"Best hp\", study.best_params) # 최고점수의 하이퍼파라미터조합"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OWo7FqgeIlLP","executionInfo":{"status":"ok","timestamp":1725321805242,"user_tz":-540,"elapsed":44309,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"7fc0bf7e-1117-493a-d129-8f13b567ec86"},"execution_count":95,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43m스트리밍 출력 내용이 길어서 마지막 5000줄이 삭제되었습니다.\u001b[0m\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000097 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000071 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000101 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000074 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000145 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000090 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000100 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000072 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000121 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000067 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000098 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000070 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000117 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000082 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000095 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000074 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000097 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000067 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000128 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000084 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000097 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000070 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000112 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000069 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000089 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000075 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000101 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000092 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000105 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000071 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000118 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000080 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000108 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000066 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000101 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000079 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=7 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 144, number of negative: 222\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000136 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 153\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.393443 -> initscore=-0.432864\n","[LightGBM] [Info] Start training from score -0.432864\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 132, number of negative: 234\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000081 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 154\n","[LightGBM] [Info] Number of data points in the train set: 366, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.360656 -> initscore=-0.572519\n","[LightGBM] [Info] Start training from score -0.572519\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=5 will be ignored. Current value: num_leaves=31\n","Best Score: 0.8951631373506374\n","Best hp {'max_depth': 2, 'min_samples_split': 2, 'criterion': 'entropy', 'max_leaf_nodes': 6, 'n_estimators': 110, 'learning_rate': 0.026719165679267694}\n"]}]},{"cell_type":"code","source":["model = LGBMClassifier(random_state=args.random_state, **study.best_params)\n","model.fit(enc_tr,y_tr)\n","\n","pred = model.predict_proba(enc_te)[:,1]\n","roc_auc_score(y_te,pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aRfIXsAMIsVP","executionInfo":{"status":"ok","timestamp":1725321805519,"user_tz":-540,"elapsed":306,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"5bd37c5b-3ee7-4111-b0bf-9a6adf2338fc"},"execution_count":96,"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Info] Number of positive: 276, number of negative: 456\n","[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000147 seconds.\n","You can set `force_row_wise=true` to remove the overhead.\n","And if memory is not enough, you can set `force_col_wise=true`.\n","[LightGBM] [Info] Total Bins 212\n","[LightGBM] [Info] Number of data points in the train set: 732, number of used features: 10\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377049 -> initscore=-0.502092\n","[LightGBM] [Info] Start training from score -0.502092\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n"]},{"output_type":"execute_result","data":{"text/plain":["0.9213659147869675"]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["optuna.visualization.plot_param_importances(study)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"CHpqQP45IsS5","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":2226,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"78907170-9851-40e6-a6b7-91ed16c62fbc"},"execution_count":97,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"f27a475e-a334-4791-ae2e-bbb95c99b9bb\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f27a475e-a334-4791-ae2e-bbb95c99b9bb\")) {                    Plotly.newPlot(                        \"f27a475e-a334-4791-ae2e-bbb95c99b9bb\",                        [{\"cliponaxis\":false,\"hovertemplate\":[\"min_samples_split (IntDistribution): 0.017477254042522688\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"criterion (CategoricalDistribution): 0.048339500612980486\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"max_leaf_nodes (IntDistribution): 0.09707859933482207\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"max_depth (IntDistribution): 0.10298026153110419\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"learning_rate (FloatDistribution): 0.2674006601195909\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"n_estimators (IntDistribution): 0.46672372435897963\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\"],\"name\":\"Objective Value\",\"orientation\":\"h\",\"text\":[\"0.02\",\"0.05\",\"0.10\",\"0.10\",\"0.27\",\"0.47\"],\"textposition\":\"outside\",\"x\":[0.017477254042522688,0.048339500612980486,0.09707859933482207,0.10298026153110419,0.2674006601195909,0.46672372435897963],\"y\":[\"min_samples_split\",\"criterion\",\"max_leaf_nodes\",\"max_depth\",\"learning_rate\",\"n_estimators\"],\"type\":\"bar\"}],                        {\"title\":{\"text\":\"Hyperparameter Importances\"},\"xaxis\":{\"title\":{\"text\":\"Hyperparameter Importance\"}},\"yaxis\":{\"title\":{\"text\":\"Hyperparameter\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f27a475e-a334-4791-ae2e-bbb95c99b9bb');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["optuna.visualization.plot_optimization_history(study)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"AU5FwMAPIsQg","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":15,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"698f9e17-44f4-4f51-a4bc-d06a807c6d37"},"execution_count":98,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"bc4ee573-d6ef-4fba-bed9-665642eb552d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"bc4ee573-d6ef-4fba-bed9-665642eb552d\")) {                    Plotly.newPlot(                        \"bc4ee573-d6ef-4fba-bed9-665642eb552d\",                        [{\"mode\":\"markers\",\"name\":\"Objective Value\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],\"y\":[0.8740323037198038,0.8888639513639514,0.882348312035812,0.8901331948206948,0.8897502725627726,0.8697571588196588,0.8904293826168825,0.8861861205611206,0.8931533150283151,0.8747807575932576,0.8827282811657811,0.8927802912177911,0.8885504276129277,0.8827282811657811,0.8815576393701394,0.8846690877940877,0.871075621075621,0.8937035812035812,0.8940648471898471,0.891843930906431,0.8921601343476344,0.8934546434546435,0.8934859247359248,0.8923367751492751,0.8931418306418307,0.8824114214739215,0.8947794494669494,0.8937233780983782,0.8899415696290697,0.8916358994483995,0.8930861587111587,0.8932006197631198,0.8931164556164557,0.8935973232848233,0.8908689064939065,0.8905168827043827,0.892746713059213,0.8904019841519841,0.8884612868987869,0.893340783965784,0.8918695246820247,0.8944142459767459,0.8928482678482679,0.8937246359121359,0.8933461980336981,0.8939081673456674,0.8937206984081985,0.8843971812721813,0.8923667986167987,0.8928155646905647,0.8946291133791134,0.8945991992866993,0.8942442770567771,0.893906143906144,0.8939021517146517,0.8934781044156044,0.8934602762727764,0.88866291991292,0.8924390955640955,0.8905916952791952,0.866537429037429,0.8937974250474251,0.8929190882315883,0.889686506874007,0.8942016207641208,0.8840723371973371,0.8945097304472304,0.8822426556801557,0.8939588080213081,0.8827282811657811,0.8937709015834017,0.893448245010745,0.8946763087388088,0.8843971812721813,0.8945064491939492,0.8935750654500655,0.8907480469980471,0.8937332765457766,0.8846227127477126,0.8920537123662123,0.8914729852229852,0.8938583469833469,0.8946337618212619,0.8944444335069336,0.8943898553273553,0.8946124883624884,0.8951631373506374,0.8940665425040425,0.8937703000203,0.8840723371973371,0.8924753534128534,0.8941002300377301,0.8843971812721813,0.893019768019768,0.893920307982808,0.8936226983101984,0.8935749560749561,0.8818490146615146,0.8819533038283038,0.8936625108500109],\"type\":\"scatter\"},{\"mode\":\"lines\",\"name\":\"Best Value\",\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],\"y\":[0.8740323037198038,0.8888639513639514,0.8888639513639514,0.8901331948206948,0.8901331948206948,0.8901331948206948,0.8904293826168825,0.8904293826168825,0.8931533150283151,0.8931533150283151,0.8931533150283151,0.8931533150283151,0.8931533150283151,0.8931533150283151,0.8931533150283151,0.8931533150283151,0.8931533150283151,0.8937035812035812,0.8940648471898471,0.8940648471898471,0.8940648471898471,0.8940648471898471,0.8940648471898471,0.8940648471898471,0.8940648471898471,0.8940648471898471,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8947794494669494,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374,0.8951631373506374],\"type\":\"scatter\"},{\"marker\":{\"color\":\"#cccccc\"},\"mode\":\"markers\",\"name\":\"Infeasible Trial\",\"showlegend\":false,\"x\":[],\"y\":[],\"type\":\"scatter\"}],                        {\"title\":{\"text\":\"Optimization History Plot\"},\"xaxis\":{\"title\":{\"text\":\"Trial\"}},\"yaxis\":{\"title\":{\"text\":\"Objective Value\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('bc4ee573-d6ef-4fba-bed9-665642eb552d');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"-P2ckbJDIkPs","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":13,"user":{"displayName":"comment no","userId":"08383959587849409435"}}},"execution_count":98,"outputs":[]},{"cell_type":"code","execution_count":99,"metadata":{"executionInfo":{"elapsed":13,"status":"ok","timestamp":1725321807742,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"w_GJBgHNbFWB"},"outputs":[],"source":["# hp = {\n","#     \"random_state\" : args.random_state\n","# }\n","# modelV0 = LGBMClassifier(**hp).fit(enc_tr, y_tr)\n","# # from sklearn.model_selection import cross_val_predict # 교차검증\n","\n","# # y_tr = cross_val_predict(modelV0, enc_tr, y_tr, cv=5)\n","# print(f'{enc_tr.shape} / {y_tr.shape}')\n","# # modelV0.fit(enc_tr, y_tr)"]},{"cell_type":"markdown","metadata":{"id":"RviCGGxH1kHt"},"source":["## Evaluation"]},{"cell_type":"code","execution_count":100,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lZ9bsXu2bMSL","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":13,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"cb2da1b6-897b-421d-a4b5-c0f930e91fb1"},"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n"]},{"output_type":"execute_result","data":{"text/plain":["(0.8633879781420765, 0.8858695652173914)"]},"metadata":{},"execution_count":100}],"source":["score_tr = model.score(enc_tr, y_tr)\n","score_te = model.score(enc_te, y_te)\n","\n","score_tr, score_te"]},{"cell_type":"code","execution_count":101,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dZMghR8J1tPn","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":11,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"20d9c522-4258-4ba5-fb6f-ff34070fef2d"},"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n","(184,)\n","model: 0.9213659147869675\n"]}],"source":["from sklearn.metrics import roc_curve, auc\n","\n","y_pred = model.predict_proba(enc_te)[:,1]\n","fpr, tpr, thresholds = roc_curve(y_te,y_pred)\n","print(y_pred.shape)\n","auc_te = auc(fpr, tpr)\n","print(f'model: {auc_te}')"]},{"cell_type":"code","execution_count":102,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3VJFOdP4FjWw","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":9,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"032b84cf-7a65-4059-cc17-196344861d99"},"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Warning] Unknown parameter: criterion\n","[LightGBM] [Warning] Unknown parameter: min_samples_split\n","[LightGBM] [Warning] num_leaves is set=31, max_leaf_nodes=6 will be ignored. Current value: num_leaves=31\n"]},{"output_type":"execute_result","data":{"text/plain":["(393,)"]},"metadata":{},"execution_count":102}],"source":["ori_te_pred = model.predict_proba(enc_ori_te)[:,1]\n","ori_te_pred.shape"]},{"cell_type":"code","execution_count":103,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jVx8YVxVmivj","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":8,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"89ab40ac-c03a-40a9-d8f3-64b79ae8c28c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([32, 13, 38, 78, 60, 90,  0,  0,  0,  0], dtype=int32)"]},"metadata":{},"execution_count":103}],"source":["model.feature_importances_"]},{"cell_type":"code","execution_count":104,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":381},"id":"SeKchpr_nZFX","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":7,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"8d83a90f-a118-4ada-82c6-105b15a78b67"},"outputs":[{"output_type":"stream","name":"stdout","text":["(10, 2)\n"]},{"output_type":"execute_result","data":{"text/plain":["           index   0\n","0  gender_female  90\n","1         pclass  78\n","2           fare  60\n","3            age  38\n","4          sibsp  32\n","5          parch  13\n","6    gender_male   0\n","7     embarked_C   0\n","8     embarked_Q   0\n","9     embarked_S   0"],"text/html":["\n","  <div id=\"df-640fee13-e323-4902-967b-4da84f35e2f5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>gender_female</td>\n","      <td>90</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>pclass</td>\n","      <td>78</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>fare</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>age</td>\n","      <td>38</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>sibsp</td>\n","      <td>32</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>parch</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>gender_male</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>embarked_C</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>embarked_Q</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>embarked_S</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-640fee13-e323-4902-967b-4da84f35e2f5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-640fee13-e323-4902-967b-4da84f35e2f5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-640fee13-e323-4902-967b-4da84f35e2f5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-72ea7261-a75c-44ca-90c2-67bce6fac500\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72ea7261-a75c-44ca-90c2-67bce6fac500')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-72ea7261-a75c-44ca-90c2-67bce6fac500 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4f730918-9284-4a08-a6c0-c0ab0cdc3b9e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_feature_importances')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4f730918-9284-4a08-a6c0-c0ab0cdc3b9e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_feature_importances');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_feature_importances","summary":"{\n  \"name\": \"df_feature_importances\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"embarked_Q\",\n          \"pclass\",\n          \"parch\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          90,\n          78,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":104}],"source":["df_feature_importances = pd.DataFrame(model.feature_importances_, enc_tr.columns).sort_values(by=[0], ascending=False).reset_index()\n","\n","print(f'{df_feature_importances.shape}')\n","df_feature_importances"]},{"cell_type":"code","execution_count":105,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DRLnSYPXbiSt","executionInfo":{"status":"ok","timestamp":1725321807742,"user_tz":-540,"elapsed":5,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"3c6dc5b1-7ada-4616-90e2-c1fe212cf645"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'model': 'modelV6',\n","  'score_tr': 0.8633879781420765,\n","  'score_te': 0.8858695652173914,\n","  'auc_te': 0.9213659147869675,\n","  'ori_te_pred': array([0.68263132, 0.89545654, 0.68263132, 0.12091735, 0.90717575,\n","         0.88879486, 0.13193282, 0.12091735, 0.66216545, 0.12675769,\n","         0.13193282, 0.1801184 , 0.67907724, 0.68263132, 0.12091735,\n","         0.22888097, 0.14538048, 0.12091735, 0.12091735, 0.12091735,\n","         0.12091735, 0.12091735, 0.12091735, 0.10904898, 0.12091735,\n","         0.12091735, 0.24749227, 0.68263132, 0.25644047, 0.23000232,\n","         0.68263132, 0.68263132, 0.24749227, 0.25644047, 0.22888097,\n","         0.12091735, 0.94499544, 0.11374832, 0.25644047, 0.12091735,\n","         0.11374832, 0.89975511, 0.12091735, 0.90783132, 0.12091735,\n","         0.11374832, 0.25012983, 0.13193282, 0.11374832, 0.12420297,\n","         0.32705498, 0.1801184 , 0.90717575, 0.12091735, 0.68263132,\n","         0.68263132, 0.15419628, 0.12091735, 0.12091735, 0.6061836 ,\n","         0.89975511, 0.5895383 , 0.68263132, 0.21233514, 0.13193282,\n","         0.12091735, 0.52445264, 0.88643166, 0.12091735, 0.92478226,\n","         0.12091735, 0.81182675, 0.68263132, 0.89545654, 0.11928938,\n","         0.1472547 , 0.11912976, 0.89545654, 0.12091735, 0.12091735,\n","         0.25644047, 0.12091735, 0.12906324, 0.4140968 , 0.41024915,\n","         0.68263132, 0.1801184 , 0.68263132, 0.22888097, 0.66216545,\n","         0.25012983, 0.90915153, 0.26706848, 0.23736853, 0.12091735,\n","         0.12420297, 0.12091735, 0.25644047, 0.12091735, 0.49291478,\n","         0.89545654, 0.68263132, 0.12091735, 0.13193282, 0.12091735,\n","         0.23000232, 0.12091735, 0.68263132, 0.12091735, 0.48020413,\n","         0.12091735, 0.13193282, 0.75534604, 0.12091735, 0.12111076,\n","         0.25012983, 0.23000232, 0.68263132, 0.25644047, 0.25644047,\n","         0.90717575, 0.11374832, 0.11374832, 0.89975511, 0.12091735,\n","         0.11374832, 0.87747422, 0.13193282, 0.12091735, 0.92428679,\n","         0.12319377, 0.12091735, 0.68263132, 0.32705498, 0.12091735,\n","         0.90915153, 0.90717575, 0.12091735, 0.90915153, 0.25644047,\n","         0.12091735, 0.12091735, 0.12091735, 0.12091735, 0.24749227,\n","         0.29612871, 0.89545654, 0.2477755 , 0.12091735, 0.11374832,\n","         0.12091735, 0.12091735, 0.12091735, 0.12091735, 0.13193282,\n","         0.12091735, 0.92478226, 0.12091735, 0.12091735, 0.90915153,\n","         0.12091735, 0.12091735, 0.90717575, 0.92478226, 0.11374832,\n","         0.46874472, 0.68263132, 0.11374832, 0.92261215, 0.12675769,\n","         0.12091735, 0.13193282, 0.12091735, 0.25644047, 0.23736853,\n","         0.12091735, 0.68263132, 0.8616448 , 0.90717575, 0.87575658,\n","         0.13537183, 0.12091735, 0.12091735, 0.89545654, 0.90915153,\n","         0.30548126, 0.90717575, 0.25012983, 0.23736853, 0.12347884,\n","         0.12420297, 0.89391542, 0.6061836 , 0.90717575, 0.23736853,\n","         0.12091735, 0.12091735, 0.13636598, 0.12420297, 0.6061836 ,\n","         0.13193282, 0.12091735, 0.13193282, 0.41024915, 0.11374832,\n","         0.11912976, 0.87575658, 0.12091735, 0.25012983, 0.12091735,\n","         0.24749227, 0.25644047, 0.21233514, 0.12091735, 0.8616448 ,\n","         0.68263132, 0.12091735, 0.11374832, 0.68263132, 0.12091735,\n","         0.11374832, 0.90717575, 0.12091735, 0.13636598, 0.12091735,\n","         0.12091735, 0.25012983, 0.90717575, 0.90783132, 0.90717575,\n","         0.66744456, 0.29612871, 0.25012983, 0.12091735, 0.89545654,\n","         0.30548126, 0.15419628, 0.12091735, 0.23736853, 0.24749227,\n","         0.10904898, 0.12091735, 0.12091735, 0.12091735, 0.12091735,\n","         0.12470766, 0.68263132, 0.12091735, 0.68263132, 0.90717575,\n","         0.90915153, 0.12091735, 0.84815544, 0.12091735, 0.89545654,\n","         0.13193282, 0.12091735, 0.24749227, 0.7639561 , 0.68263132,\n","         0.12091735, 0.89545654, 0.41024915, 0.2477755 , 0.25644047,\n","         0.22888097, 0.12091735, 0.12091735, 0.6061836 , 0.88879486,\n","         0.2470745 , 0.12841481, 0.12091735, 0.12091735, 0.84815544,\n","         0.12091735, 0.12091735, 0.12091735, 0.12091735, 0.29612871,\n","         0.12091735, 0.87747422, 0.6061836 , 0.13193282, 0.90717575,\n","         0.12091735, 0.12675769, 0.21233514, 0.68263132, 0.12091735,\n","         0.12091735, 0.11374832, 0.24712838, 0.12091735, 0.13193282,\n","         0.88643166, 0.23736853, 0.12091735, 0.8511814 , 0.11374832,\n","         0.11918948, 0.89545654, 0.4140968 , 0.25644047, 0.90717575,\n","         0.24749227, 0.11374832, 0.12091735, 0.12091735, 0.12091735,\n","         0.68263132, 0.12091735, 0.68263132, 0.24749227, 0.90915153,\n","         0.89545654, 0.12091735, 0.12091735, 0.12091735, 0.6061836 ,\n","         0.25012983, 0.12091735, 0.12091735, 0.90915153, 0.66744456,\n","         0.12091735, 0.13193282, 0.88643166, 0.20450266, 0.68263132,\n","         0.68263132, 0.12091735, 0.12091735, 0.23000232, 0.67907724,\n","         0.89545654, 0.12091735, 0.12091735, 0.89545654, 0.12091735,\n","         0.90717575, 0.12091735, 0.25012983, 0.68263132, 0.12091735,\n","         0.11374832, 0.81182675, 0.23736853, 0.90717575, 0.68263132,\n","         0.5895383 , 0.89545654, 0.12091735, 0.13515914, 0.85974072,\n","         0.68263132, 0.22888097, 0.12091735, 0.89545654, 0.89545654,\n","         0.10904898, 0.68263132, 0.92428679, 0.12091735, 0.89545654,\n","         0.13193282, 0.68263132, 0.13193282, 0.89975511, 0.12091735,\n","         0.12091735, 0.12091735, 0.22888097, 0.68263132, 0.87490431,\n","         0.90717575, 0.12091735, 0.90717575, 0.12091735, 0.88643166,\n","         0.11374832, 0.13193282, 0.93491486, 0.12091735, 0.12091735,\n","         0.12091735, 0.22414616, 0.68263132, 0.68263132, 0.90915153,\n","         0.68263132, 0.58379366, 0.68263132]),\n","  'len_features': 10,\n","  'feaute_importances': ['gender_female',\n","   'pclass',\n","   'fare',\n","   'age',\n","   'sibsp',\n","   'parch',\n","   'gender_male',\n","   'embarked_C',\n","   'embarked_Q',\n","   'embarked_S'],\n","  'create_dt': '0217'}]"]},"metadata":{},"execution_count":105}],"source":["args.results.append(\n","    {\n","        'model': 'modelV6',\n","        'score_tr': score_tr,\n","        'score_te': score_te,\n","        'auc_te': auc_te,\n","        'ori_te_pred': ori_te_pred,\n","        'len_features': X_tr.shape[1],\n","        'feaute_importances': list(df_feature_importances['index'].values[:X_tr.shape[1]]),\n","        'create_dt': '0217'\n","    }\n",")\n","\n","args.results"]},{"cell_type":"markdown","metadata":{"id":"IvhHDW2a4PXj"},"source":["# Submission"]},{"cell_type":"code","execution_count":106,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":98},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1725321808244,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"dRH3EPQt25r7","outputId":"2b185b45-6fc5-4156-f074-d9c86d8edfc6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     model  score_tr  score_te    auc_te  \\\n","0  modelV6  0.863388   0.88587  0.921366   \n","\n","                                         ori_te_pred  len_features  \\\n","0  [0.6826313200274536, 0.8954565439129303, 0.682...            10   \n","\n","                                  feaute_importances create_dt  \n","0  [gender_female, pclass, fare, age, sibsp, parc...      0217  "],"text/html":["\n","  <div id=\"df-3f64e120-2f3b-4a4a-8d63-455f001d8c87\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_tr</th>\n","      <th>score_te</th>\n","      <th>auc_te</th>\n","      <th>ori_te_pred</th>\n","      <th>len_features</th>\n","      <th>feaute_importances</th>\n","      <th>create_dt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>modelV6</td>\n","      <td>0.863388</td>\n","      <td>0.88587</td>\n","      <td>0.921366</td>\n","      <td>[0.6826313200274536, 0.8954565439129303, 0.682...</td>\n","      <td>10</td>\n","      <td>[gender_female, pclass, fare, age, sibsp, parc...</td>\n","      <td>0217</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f64e120-2f3b-4a4a-8d63-455f001d8c87')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3f64e120-2f3b-4a4a-8d63-455f001d8c87 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3f64e120-2f3b-4a4a-8d63-455f001d8c87');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_884c4a37-1dd1-4150-8c14-1722faad259d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_results')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_884c4a37-1dd1-4150-8c14-1722faad259d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_results');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results","summary":"{\n  \"name\": \"df_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"modelV6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_tr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8633879781420765,\n        \"max\": 0.8633879781420765,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8633879781420765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8858695652173914,\n        \"max\": 0.8858695652173914,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8858695652173914\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auc_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9213659147869675,\n        \"max\": 0.9213659147869675,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9213659147869675\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ori_te_pred\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len_features\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10,\n        \"max\": 10,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feaute_importances\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"create_dt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0217\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":106}],"source":["df_results = pd.DataFrame(args.results).sort_values(by=['auc_te'], ascending=False)\n","df_results"]},{"cell_type":"code","execution_count":107,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1725321808244,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"KrN0fM9qNLlH","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"c55739bc-acdc-4efe-a56f-96ed0690c1b4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived\n","0          916       0.5\n","1          917       0.5\n","2          918       0.5\n","3          919       0.5\n","4          920       0.5"],"text/html":["\n","  <div id=\"df-4963cf47-ec6b-4cac-8ea1-16f5addc19c0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>916</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>917</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>918</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>919</td>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>920</td>\n","      <td>0.5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4963cf47-ec6b-4cac-8ea1-16f5addc19c0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4963cf47-ec6b-4cac-8ea1-16f5addc19c0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4963cf47-ec6b-4cac-8ea1-16f5addc19c0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7f3c4568-deec-4f79-ad25-9ca0d58c7d08\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f3c4568-deec-4f79-ad25-9ca0d58c7d08')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7f3c4568-deec-4f79-ad25-9ca0d58c7d08 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submission","summary":"{\n  \"name\": \"submission\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.5,\n        \"max\": 0.5,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":107}],"source":["submission = pd.read_csv(args.default_submission_csv)\n","submission.head()"]},{"cell_type":"code","execution_count":108,"metadata":{"executionInfo":{"elapsed":16,"status":"ok","timestamp":1725321808244,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"1_lo3-TUL7Og","colab":{"base_uri":"https://localhost:8080/","height":381},"outputId":"6982809b-200b-4a75-8079-912e5514af82"},"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]},{"output_type":"execute_result","data":{"text/plain":["   passengerid  survived\n","0          916  0.682631\n","1          917  0.895457\n","2          918  0.682631\n","3          919  0.120917\n","4          920  0.907176\n","5          921  0.888795\n","6          922  0.131933\n","7          923  0.120917\n","8          924  0.662165\n","9          925  0.126758"],"text/html":["\n","  <div id=\"df-049cc6e6-5384-45ca-8620-31dd5fa8b4a6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>passengerid</th>\n","      <th>survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>916</td>\n","      <td>0.682631</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>917</td>\n","      <td>0.895457</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>918</td>\n","      <td>0.682631</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>919</td>\n","      <td>0.120917</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>920</td>\n","      <td>0.907176</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>921</td>\n","      <td>0.888795</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>922</td>\n","      <td>0.131933</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>923</td>\n","      <td>0.120917</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>924</td>\n","      <td>0.662165</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>925</td>\n","      <td>0.126758</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-049cc6e6-5384-45ca-8620-31dd5fa8b4a6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-049cc6e6-5384-45ca-8620-31dd5fa8b4a6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-049cc6e6-5384-45ca-8620-31dd5fa8b4a6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6e2360bd-d89b-4b31-8141-8dfd5117f0e3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e2360bd-d89b-4b31-8141-8dfd5117f0e3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6e2360bd-d89b-4b31-8141-8dfd5117f0e3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"submission","summary":"{\n  \"name\": \"submission\",\n  \"rows\": 393,\n  \"fields\": [\n    {\n      \"column\": \"passengerid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113,\n        \"min\": 916,\n        \"max\": 1308,\n        \"num_unique_values\": 393,\n        \"samples\": [\n          994,\n          1191,\n          1163\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3159438744471642,\n        \"min\": 0.10904897611364024,\n        \"max\": 0.9449954366612503,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          0.8887948583227719,\n          0.12841481298534155,\n          0.8997551122379719\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":108}],"source":["submission['survived'] = df_results.loc[0, ['ori_te_pred']].values[0]\n","\n","print(f'{submission.isnull().sum().sum()}')\n","submission.head(10)"]},{"cell_type":"code","execution_count":109,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1725321808244,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Px2O6OYdL7ed"},"outputs":[],"source":["submission.to_csv(args.submission_csv, header=True, index=False)"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# 예시 데이터 (실제 데이터로 교체하세요)\n","actual = y_te\n","predict = y_pred  # 예측값\n","\n","# 임계값 설정\n","threshold = 0.5\n","predict_binary = (predict >= threshold).astype(int)\n","\n","# Confusion Matrix 계산\n","cm = confusion_matrix(actual, predict_binary, normalize=\"true\")\n","\n","# Confusion Matrix 출력\n","print(\"Confusion Matrix:\")\n","print(cm)\n","\n","# 시각화\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, cmap=\"Blues\", xticklabels=[\"Predicted 0\", \"Predicted 1\"], yticklabels=[\"Actual 0\", \"Actual 1\"])\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Label\")\n","plt.ylabel(\"Actual Label\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":663},"id":"ThBG3NV290kC","executionInfo":{"status":"ok","timestamp":1725321809613,"user_tz":-540,"elapsed":1381,"user":{"displayName":"comment no","userId":"08383959587849409435"}},"outputId":"85e8cc61-ff75-458e-de61-64acd58b01dd"},"execution_count":110,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[0.92105263 0.07894737]\n"," [0.17142857 0.82857143]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{"image/png":{"width":725,"height":592}}}]},{"cell_type":"markdown","metadata":{"id":"bBHKc63d2Waj"},"source":["# Save Results"]},{"cell_type":"code","execution_count":53,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1725321541242,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Uxmnxqnl2aNJ","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"19280b46-6ee6-49ea-a959-288898e23e6d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/data/MyDrive/AI_study/1. Machine Learning/3. Supervised Learning/original data/result/model_results.json'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":53}],"source":["args.save_results"]},{"cell_type":"code","execution_count":54,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1725321541242,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"104aSV_bOJKo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3dc0db37-0f1a-4893-d4c7-aca86654ff92"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['model', 'score_tr', 'score_te', 'auc_te', 'ori_te_pred',\n","       'len_features', 'feaute_importances', 'create_dt'],\n","      dtype='object')"]},"metadata":{},"execution_count":54}],"source":["df_results.columns"]},{"cell_type":"code","execution_count":55,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1725321541242,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"KT9aOigbOPVp"},"outputs":[],"source":["df_results.drop(['ori_te_pred'], axis=1, inplace=True)"]},{"cell_type":"code","execution_count":56,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1725321541242,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"xtdnf4LiOPZT"},"outputs":[],"source":["df_results.to_json(args.save_results, orient=\"records\")"]},{"cell_type":"code","execution_count":57,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1725321541242,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"3qLMRrD7PWDe","colab":{"base_uri":"https://localhost:8080/","height":81},"outputId":"5e09d334-f817-42f3-800a-43a238f6671c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     model  score_tr  score_te    auc_te  len_features  \\\n","0  modelV5  0.864754   0.88587  0.927882            10   \n","\n","                                  feaute_importances create_dt  \n","0  [gender_female, pclass, fare, age, sibsp, parc...      0217  "],"text/html":["\n","  <div id=\"df-adfed635-3bd6-4d9c-8baa-3e13a259d4a5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>score_tr</th>\n","      <th>score_te</th>\n","      <th>auc_te</th>\n","      <th>len_features</th>\n","      <th>feaute_importances</th>\n","      <th>create_dt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>modelV5</td>\n","      <td>0.864754</td>\n","      <td>0.88587</td>\n","      <td>0.927882</td>\n","      <td>10</td>\n","      <td>[gender_female, pclass, fare, age, sibsp, parc...</td>\n","      <td>0217</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-adfed635-3bd6-4d9c-8baa-3e13a259d4a5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-adfed635-3bd6-4d9c-8baa-3e13a259d4a5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-adfed635-3bd6-4d9c-8baa-3e13a259d4a5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_results","summary":"{\n  \"name\": \"df_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"modelV5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_tr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8647540983606558,\n        \"max\": 0.8647540983606558,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8647540983606558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8858695652173914,\n        \"max\": 0.8858695652173914,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8858695652173914\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"auc_te\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9278822055137845,\n        \"max\": 0.9278822055137845,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9278822055137845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"len_features\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10,\n        \"max\": 10,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feaute_importances\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"create_dt\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"0217\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":57}],"source":["# 어떤 모델이 일을 잘했는지 확인 가능\n","df_results.head()"]},{"cell_type":"code","execution_count":58,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1725321541242,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"MJABjgAx2gOY","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8bfb0702-2571-4a9d-9cab-8639d8f7e13f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'model': 'modelV5',\n","  'score_tr': 0.8647540984,\n","  'score_te': 0.8858695652,\n","  'auc_te': 0.9278822055,\n","  'len_features': 10,\n","  'feaute_importances': ['gender_female',\n","   'pclass',\n","   'fare',\n","   'age',\n","   'sibsp',\n","   'parch',\n","   'embarked_S',\n","   'gender_male',\n","   'embarked_C',\n","   'embarked_Q'],\n","  'create_dt': '0217'}]"]},"metadata":{},"execution_count":58}],"source":["import json\n","\n","load_results = None\n","with open(args.save_results, 'r') as file:\n","    load_results = json.load(file)\n","\n","load_results"]},{"cell_type":"code","execution_count":59,"metadata":{"executionInfo":{"elapsed":1285,"status":"ok","timestamp":1725321542521,"user":{"displayName":"comment no","userId":"08383959587849409435"},"user_tz":-540},"id":"Fb9kcDEJQWvy","colab":{"base_uri":"https://localhost:8080/","height":663},"outputId":"28d1ea39-da70-460b-d482-f00ef1e06e59"},"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[0.92105263 0.07894737]\n"," [0.17142857 0.82857143]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"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dapCQ0M9ul+HDh20cOFCBQcHe3RdAOarWbOm3d8Z06dPV3p6ukfWT0pK0m+//WbTV7duXRUqVMgj6wMAAACOkKwGAMBHfv75Z23fvt2uf/To0SpZsqRX9qxTpw4nq4F/IX9/f3Xp0sWm79SpU1q2bJlH1p87d66SkpJs+rp27eqRtQEAAICsULMaAAAfyMjI0IcffmjX3759e7Vo0cKEiADkdt26ddPXX39t0/fzzz/rvvvuy/Ha15cUyZcvnzp37qx//vknx2tnlpiYqL///ltbt27VgQMHFB8fr/j4eKWmpio4OFihoaGqXLmy6tSpozp16lCiBwAA4F+OZDUAAD6wZMkSHTp0yKbPYrHotddeMymirGVkZGjHjh06cOCAjh8/ruTkZPn7+ysoKEhlypRRlSpVFBkZ6bN40tLS9Pfff2v79u06e/as/P39VaRIERUtWlR169ZVWFiYz2LJjWJiYrR9+3bFxsYqISFBqampKly4sJEEvO222+Tv7292mLzu3HD77berUqVK2r17t9E3f/58XbhwIUflf44fP64VK1bY9LVq1UohISFur5lZXFyc5syZoxkzZmjlypXKyMhwal7ZsmXVr18/9evX76Z4zWbnzJkzWrt2raKjo5WcnKx8+fKpRIkSqlevnsfuTQAAAPBvRLIaAAAfuP5GZZLUpEkTVapUyYRoHFu3bp0mTpyohQsX6sKFC9mOjYyM1AMPPKDevXurVKlSLu/Vtm1brVq1yqZv9erVqlKlitHeu3evvvzyS82ePVtxcXEO17FYLKpRo4b69Omj7t273/DUZfXq1XX06NEbxte+ffssH+vWrZu++uorm77rk3hlypTJ0QnUH3/8UQMGDLDp++KLL9SjRw+n5h8/flwTJ07UL7/8csPnW7BgQTVu3FgPP/ywWrVqpXz58t1w/f79+9u9pufOnatGjRo5FV9m/4XXnTd169ZNb775ptG+ePGiZs+erUcffdTtNadNm2aXQO7WrZvb61116tQpffLJJ/rmm2906dIll+cfPnxYQ4YM0dy5c/X999+rWLFidmM88T0uZf16drT+tm3bVLZsWUnSmjVrNGrUKC1btizL+uHR0dE2f2f89ddfdvE4+ntGuvL3wPVvchYpUkRr1qxReHh4ts8pK9u3b9e9996ry5cvG30BAQGaP3++6tWr59aaAAAA7uJzdAAAeNnly5e1dOlSu35nE4/eFh0drccee0wtW7bUL7/8csOEoSQdOXJEn3zyierWrasPPvhAycnJHosnMTFRAwcO1J133qlvv/02y4ShJFmtVm3btk3PPPOMmjZtqtjYWI/FkVuNGzdO9erV08cff+xU0i4pKUkLFizQY489ppo1a+q7777z2E36ssPrzjO6du1qd8r4+hIerpo6dapNu1ixYmrevHmO1oyLi1OtWrX01VdfuZWozmzNmjV67LHHfPI6dVZKSopeeOEFtW7dWkuWLPFabAMGDFDLli1t+s6dO6dnnnnGrfUuXbqk3r172ySqJWno0KEkqgEAgClIVgMA4GXr169XYmKiTV9AQIBH6srm1IIFC9SgQQPNnj3brfnJycn64IMP1LhxYx05ciTH8URHR6tZs2aaOHGi06UBrvr777/VoUMHnT59Osdx5Favv/66XnnlFbvXm7NOnDih559/Xj179vRwZLZ43XlORESEmjVrZtO3evVqt/9ctm3bpp07d9r0denSRQEBOftAZkpKisM3F8LDw9WtWzdNmDBBK1eu1J49e3T69GnFxMRo48aN+uqrrxwmTVevXm1Xr9ssGRkZeuSRR/Ttt9/6ZL+vvvrK7pMFS5Ys0YQJE1xe6/XXX7cpIyNJzZs31/PPP5+jGAEAANxFGRAAALxs06ZNdn3VqlXzWP1Xd02ePFnPP/+8wxOAVatWVYsWLRQVFaXixYvr8uXLOnv2rLZu3aolS5bYnSTdv3+/WrZsqRkzZtiUVHDFqVOn9MwzzygmJsamPzIyUh07dlSlSpVUtGhRxcfHa/fu3ZozZ472799vM3bfvn16/fXXNXbsWId73H777XZJnpiYGLs9q1SpkmXN34oVK7r61Hxizpw5Gj16tF1/0aJF1bFjR9WqVUvFihVTenq6zpw5o+PHj2vlypVav369UlJSbOacPXvWa3H+F1933tatWzebT29YrVZNnTpVL730kstrOTqV/fDDD+coPkeqV6+uZ599Vp07d3aYCM+TJ48qVqyoihUrqmvXrnrllVfsktPjx49Xv379ZLFYjD5H3+MHDhywezMhu+9xSS7V/P7www+1ePFim74777xT7du3V1RUlCwWi44cOaJly5ZpyZIlNvG6o0iRIpowYYLatWtn8330xhtvqGnTpk7/HbVo0SK7P9MSJUpo7NixOY4RAADAXSSrAQDwMke1i2vVquX7QDJZu3atnnvuObtTpLVq1dKIESNUv379LOdmZGTohx9+0LBhw3TmzBmjPzY2Vt26ddPKlStVqFAhl2MaOHCgTcIwMjJSw4YN0/333+9w/JAhQzRixAh9+OGHNv1Tp05V//79VbNmTbs53333nV3f+++/rxEjRtj0jRgxwq36y2YaNmyYXV+HDh00duxYFShQIMt5iYmJ+v777/XFF1/o2LFj3gzxP/u687a2bdsqODjYppSKO8nq9PR0zZgxw6avSpUqHn1OYWFhGjZsmLp37+70HD8/P73//vtatmyZDhw4YPQfPHhQ27Zts/n71NH3uKMa6578Hp8yZYpxXbFiRX322We666677Mb169dPBw8eVOHChXO8Z4MGDTRkyBCb7/vk5GT17dtXixcvvuFJ+Ktv0mTm5+en8ePHq2jRojmODwAAwF2UAQEAwMscfRy/fPnyJkRyRUJCgvr162eXMGzdurUWL16cbcJQupLQeOyxx7R06VKVKVPG5rHDhw/r5ZdfdiuuzEmoe++9V6tWrcoyYShdKaXy2muv6aGHHrLpt1qt+vHHH92KIbfauXOn9u3bZ9MXFBSkL7/8MttE9dVxTz/9tLZu3arXX3/dqRssuoPXnffkz59fnTt3tunbv3+/Nm7c6NI6v//+u06dOmXT54kbK0pXXmdPPPGENmzY4FKi+qqAgACH8xx9csUsNWvW1OLFix0mqq/y5N/9L774ol0JmM2bN9u9+ebIgAED7E6bv/zyy7nuTToAAPDvQ7IaAAAvc3RatWTJkiZEcsVnn32mw4cP2/RVq1ZN33//vfLmzev0OuXKldPMmTPtkps//fSTNmzY4HZ89957r6ZOner0KdnBgwfbfWR9zpw5slqtbseQ2xw6dMiur3r16goKCnJ6jTx58mjgwIFavnx5tsk2d/G68y5HSWVXb7R4/Y0V/f399eCDD+YorqsKFiyoUaNGqUiRIm6vUadOHbu+6+trm6VIkSKaOnVqjp6fqywWi8aPH6/w8HCb/lGjRmX7vTB27FgtWbLEpq9Ro0Zuv+EDAADgSSSrAQDwsoSEBLs+V+qhelJKSorDj8l/+umnypMnj8vrVaxYUf/3f/9n1+/ujc9Kly6tCRMmuHQzt/Lly6tatWo2fSdOnHCYwP23unz5ssfWqlSpkl5//XWPrSfxuvOF+vXr29Uq/vXXX5WamurU/AsXLmj+/Pk2fc2aNVNERITHYsypqKgou764uDgTIrE3bNgwU/6sihUrpvHjx8vP79qvdenp6erXr5+SkpLsxu/YsUNvvfWW3Rpff/21zRoAAABm4ScSAAC87OLFi3Z93iq1cCOzZ8+2++h3/fr1HZ5YdFafPn3sEo6zZs2yqSvsrLfffluhoaEuz2vYsKFd381y4tIXrj9ZKV15/s4mKr2N151vXH8jxHPnzmnRokVOzZ09e7bd31WeKgHiKY5OvWeu022W0qVLq2vXrqbt36RJEw0cONCm7+DBgxoyZIhN36VLl9SnTx9dunTJ6LNYLBo3btxN9aYEAAD4byNZDQCAlzkqC2BWqYDFixfb9eX0Y/5hYWG65557bPpSUlK0fPlyl9apVKmSXd1dZzmqA7t//3631sqN7rjjDrva1OfPn9fnn39uUkS2eN35xsMPP2x3OtbZUiDXjwsODlbbtm09Fpu7UlNTtW/fPi1YsEDffvut3eOZE69mefDBB106le8NgwcPtnvz5LvvvtOCBQuM9htvvGH3ZsoLL7xg930EAABgJpLVAAB4Wf78+e36PFm2wRXr16+363N0OtRVjtZYu3atS2vcf//9djWAneXoVOD58+fdWis3yp8/vx599FG7/nfffVcvvfSSw3IAvsTrzjdKly5td4O8xYsX37BUxpEjR7R69Wqbvo4dOzr8u8tbDh8+rN9//13jx4/XK6+8oi5duqh27dqKiIhQ3bp11a1bN7399tt2826G2vRNmzY1OwT5+/trwoQJCgsLs+l/7rnndPr0aS1ZssSuTM6dd96p1157zZdhAgAA3JC5RwAAAPgPCAoKsksWmpHQOn36tN0N7vLmzatbb701x2tXrVrVrs/Vm901b97c7f2vP1UsSYmJiW6vlxu9+uqrWrJkiQ4ePGj0Wa1Wff3115o9e7b69eunJ554wq1yFznB6863unXrZnO6PCUlRb/++quefPLJLOf88ssvdklfb5cAOXnypKZNm6Y//vhDmzdvvmlqT7ujQoUKZocg6cqNe8eOHauHHnrI+P95+vRp9enTRzt37rT5fxwaGupynXYAAABf4GQ1AABe5uj05fX1e30hJibGri8yMtIjyQpHyZqjR4+6tEbp0qXd3t/RCVCzTxP7WkhIiGbMmOHw/8WpU6c0bNgwValSRc8884y2bt3qs7h43flWhw4d7Go736gUyNSpU23a5cqVU4MGDTwem3TlFPcTTzyhKlWqaOjQofr9999zdaJakooWLWp2CIb77rtPzz77rE3fn3/+qVOnTtn0ffnllzl67QMAAHgLyWoAALysVKlSdn3XnzT1BUcJIUc3LHOHo3VcPT1erFgxj8Ry1c1QHsDXoqKitHTp0ixrMF+8eFGTJ09W06ZNdd9992nGjBlKS0vzaky87nyrQIEC6tChg03fhg0bbE7cZ7Zp0ybt27fPpu/6GzV6ypQpU1SvXj39+uuvSk9Pv+H4wMBA3XbbbbrvvvvUu3dvvfPOOypSpIhXYssJX5ZLccYbb7yhunXrZvl4//791bp1ax9GBAAA4DyS1QAAeFnlypXt+q5PDvlCfHy8XV9QUJBH1naUNExLS3MpccjH0T0jNDRUkyZN0tSpU1WpUqUsx23YsEFPPvmkatWqpfHjx3vtRnW87nzPUQmPn376yeHY609dWywWrySrR48eraefftrh6ywgIEBNmjTRoEGDNHHiRC1ZskR79+5VbGys1q1bp2nTpumjjz7Sc889p4IFC3o8tn+bgIAATZw4Ufny5bN7rFKlSg5rfwMAANwsSFYDAOBlNWrUsOvbsmWL6ScwPcndG9TBe1q2bKlVq1Zp0qRJqlWrVpbjYmJi9PLLL6tu3bqaM2eO7wL0AF53jt11110qW7asTZ+jutSpqan69ddfbfruvPNOlStXzqPxLFu2TG+++aZdf2BgoAYNGqQ9e/Zo9uzZGjp0qB544AHVrVtXxYsX92gM/zXLly93eCPf6Oho7d2714SIAAAAnEOyGgAAL2vYsKFdUi0+Pl7//POPT+MICQmx6/PUzeAuXLhg1+fv76/g4GCPrP9f46k3Mvz9/dW5c2f9+eefWrRokbp27ZplyYKjR4+qZ8+eeumll5SRkeGR/SVed2ZwdDr68OHDWr16tU3f4sWLdfbsWZs+T99YMS0tTS+88ILda6ps2bL6448/NHToUIWFhXl0z/+6vXv36pVXXnH42KVLl/TEE08oOTnZx1EBAAA4h2Q1AABeVqxYMdWsWdOu/7fffvNpHKGhoXZ9jpJ97khISLDrCwkJ4eSrmxyVzsip+vXra9y4cdq1a5eGDRuW5c3Vvv76a7388sse25fXnTm6detm9+dw/Y0Ury8BEhgYqI4dO3o0jmnTpunIkSM2fQUKFNDMmTOzLVOTFU++kfJvdPnyZbtk9PWvg7179+qll17ydWgAAABOIVkNAIAPPPDAA3Z906ZN82ni5fqyANKV07Spqak5Xnv//v1O7fdvVaBAAZu2o4/fu+L06dM5mp+d0NBQPfvss9q8ebPef/99hzWAJ0yYoGXLlnlkP1535ihXrpwaNGhg0zdr1iyjZnR8fLwWL15s83ibNm08fird0Ztyffr0Ufny5V1ey2q1evV7499g6NCh2r59u03f+++/r3vvvdem78cff9T06dN9GRoAAIBTSFYDAOADXbt2Vd68eW36Dh06pLlz5/oshiJFitgliFJSUrRnz54cr319ckSS6tSpk+N1c4vrb/SXlJSUo/XWr1+fo/nOyJs3r/r376+lS5eqWLFido+PGzfOI/vwujPP9SU9Lly4oPnz50uSfv31V7s3VTxdAkSSVq1aZdd3//33u7XWgQMHlJKSktOQ/rXmzZunr7/+2qavWbNm6tevn7744gsVKVLE5rH/+7//06FDh3wZIgAAwA2RrAYAwAeKFy+u7t272/W/8847Pk2+OErk/fXXXzle11FCqm7dujleN7e4vtRFUlKS26U84uPjtWHDBg9E5ZzKlSvrww8/tOtfsWKFx/bgdWeOjh072p36nzlzpiTZ3UwzIiJCzZo18+j+ycnJDr8P3Cn/Icmnb+7lNseOHdMzzzxj0xcSEqIvvvhCFotFERER+uSTT2weT0hI0BNPPMEbAAAA4KZCshoAAB958cUXFRgYaNN34MABvfvuu17bc8WKFTZJx3bt2tmN+eWXX3K0x8mTJ/XHH3/Y9OXPn1/NmzfP0bq5ya233mrX5+7J4XHjxiktLS2nIbmkRYsWdn0XL17U+fPnPbI+rztzFCpUyO7P/s8//1R8fLzWrFlj0//ggw/K39/fo/s7ev34+/vbJdCdcfHiRU2YMMETYf3rpKenq0+fPoqLi7Pp//jjj1WyZEmjff/999udnt+yZYveeustX4QJAADgFJLVAAD4SGRkpMObWo0ePVrTpk3z+H7z58/Xgw8+aFMqoU2bNipRooTNuC1btmjlypVu7/PVV18pPT3dpq9Dhw4Ob6z3b1W1alW7vj///NPldU6ePKkvv/zSAxG5xtHJSj8/P7eSio7wujPP9Z/oSEhI0IcffuiTEiCO6l+np6fr3LlzLq81atQoHTt2zBNh/euMHDlSq1evtul74IEHHN4rYcSIESpTpoxN31dffWVXvxwAAMAsJKsBAPCh5557zu6mZ1arVf3799cPP/zgkT2sVqs++eQTPfLII3YJqYCAAD3xxBN2cwYOHGjceM0VO3fu1BdffGHX37dvX5fXys2aNm1q1zd9+nS7ZGp20tLS9Pjjj7t8mvnAgQMaOXKkLly44NK8zDZt2mTXFxERoTx58ri9Zma87szTuHFjlS5d2qZv/PjxNu0aNWqoSpUqHt+7YMGCDhPWrt68c968efroo4/cjiN//vx2ff+W0herVq2y+7MpWbKkPv74Y4fjg4ODNXbsWPn5Xfs18Oq/QbGxsV6NFQAAwBkkqwEA8KGAgAB99913difb0tLS9Oyzz2rAgAFu1zqWpN27d6tt27Z6++23lZGR4XDMs88+a1e2Ys+ePerRo4dLicMDBw6oS5cuSk1Ntenv1avXf+4md/Xr11dUVJRN3759+zRx4kSn5icmJqp79+52pyOdcfz4cQ0fPlw1a9bUqFGjXE5ap6enO0wEtmnTxuVYssPrzhx+fn7q2rWrTd/1f3beOFV91d13323X98EHHyghIcGp+T/99JMef/xxWa1Wt2MICQmx6/s3JGbPnTunvn372rwpZrFY9MUXXzh8zlfdddddeu6552z6zp49qz59+mT57wYAAICvkKwGAMDHihcvrrlz59qddpSkH3/8UTVr1tS7776r6Ohop9dcs2aNevfurYYNG94w4Zk/f359+eWXdvVpf//9dzVv3tzhTesyy8jI0KRJk3Tffffp+PHjNo+VLl1aw4YNczruf5OnnnrKrm/IkCH6/vvvs523aNEiNW3a1OZj+I5eGzcSFxend955R5UrV9YzzzyjDRs23DDBd/r0aT322GN29YuzOgmdE7zuzJNdMjogIEAPPvig1/bu0qWLXd/+/fvVqVMnHTp0KMt5x44d0xNPPKH+/fsbp6AdndJ2RsWKFe36rr/BZGZpaWmaPn269u7d69Z+vjJgwAC70ih9+vRx6kaZQ4YMUfXq1W36Vq5c6fBmqwAAAL4UYHYAAAD8F5UrV05LlizRo48+qo0bN9o8dv78eX300Uf66KOPVKVKFdWrV0+33HKLSpUqpYIFC0q6chL36NGj2r59u1auXGmXvMusaNGidn116tTR119/rb59+9rczG/79u1q27atqlSpopYtW6p8+fIqVqyYUlJSdObMGW3dulWLFi3SyZMn7dYsWbKkfv31VxUqVMjdP5ZcrXfv3vrxxx/1999/G31paWl67rnnNG7cOLVr10633nqrgoODdebMGe3bt0+//fabXUKsffv2Klu2rMaMGeNWHElJSZo8ebImT56ssLAwNW7cWLfffrvCw8NVpEgRXbp0SUeOHNGGDRu0aNEiJScn263x0ksveaUsBK87c1SsWFH16tXT+vXr7R5r3ry5w78jPKVTp04aM2aMNm/ebNO/ceNG1atXT61bt1bjxo1VqlQppaenKyYmRn/88Yd+//13m9eIv7+/Ro8erccee8zlGO666y5ZLBabN28WL16s+++/X506dTLqqR89elSbN2/W77//rpMnT2ry5MkOb556Mxg3bpwWLFhg03frrbfq7bffdmp+3rx5NX78eDVr1szmkw0jR45Uo0aN1LBhQ4/GCwAA4CyS1QAAmKREiRKaP3++Ro4cqc8++8zuo/nSldq8O3fudGv90qVLa8SIEWrbtq3Dxzt37qzAwEA9+eSTdglLV/eNiorSzJkzVa5cObdi/Tfw9/fXN998ow4dOtiddtyxY4d27NhxwzWaNGmi8ePH67333nN632LFiikkJMRh+ZizZ89q5syZmjlzptPr9e3bVy+//LLT413F684c3bp1c5is9mYJEOlKWYqJEyeqdevWOnHihM1jqampmjNnTrannCUpX758Gjt2rO699163YihXrpxatmyphQsX2vQvX75cy5cvd2tNM/3zzz964403bPoCAgI0btw4BQYGOr1O5cqV9eabb+rVV181+tLT09WnTx+tXLmSm5UCAABTUAYEAAAT5c2bV0OHDtXq1avVpUsXm5teuats2bIaPny4Nm7cmGWi+qrWrVtr7dq1NxyXlXz58mnQoEFatWoVCUNJFSpU0Lx581SjRg2X5uXJk0cvvPCCZsyY4VKySZIqVaqkrVu36sUXXzRO3rujWLFi+uKLLzRy5EhZLBa313EGrzvf69Spk92NBkNCQtSqVSuv7x0VFaXffvtNd9xxh8tza9WqpaVLl6pTp045iuHTTz91q7zOzSYpKUlPPvmk3c1zX3rpJdWuXdvl9Z566im7G8QeO3ZMTz/9dE7CBAAA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FO7h6+urcePGlWlNZmamdZ2UlKQuXbo4fH3ChAnq1q1bhepxxtawuqjC4Pq55567ZHBd+J8rVqzQihUr5O3treuuu079+/dXv3791Lx5c9s+AwAAAAAAAAA4ExcXZwXGW7duLfO61NRUKyMt3KcycnJytGPHjnKvy83NLbYuPT29UrVcrEq2hykaWq9cuVL/+Mc/1KhRI5mm6dAGxDRN5eXlKSEhQc8995w6deqkdu3aady4cVq1apXy8vJs/BQAAAAAAAAAnDEMo1q/KqJr167W9bp168q8LiEhwSET7dChQ4XuXx0YaWlp1aYJ9JYtWzRv3jwtWLBABw8elFS8VUjR92rVqqWePXvq448/9nyx1djp/AC7SwAAAChV85Ef2F0CAABAqZJmDre7hCpp/q+uPZHrabdcEVzuNb/99pvatWtnjRcsWKDu3buXum7kyJGaP3++JKlVq1b6/vvvy33vivp//+//afTo0ZKkRo0aafv27W69X5U8WV2Sdu3a6YUXXtC2bdv07bff6u9//7uioqIceloXDa8zMjK0cOFCO0sGAAAAAAAAAMXExDiE1dOmTSt1zd69e7Vo0SJrfNddd7mltqqiWoXVRbVv314vvPCCfvrpJ61YsUJ/+9vfrODaNM0KH8cHAAAAAAAAAHco+mDDFStWaPr06SXOzcrK0qhRo6xWx+Hh4RoxYkSxefv379eQIUPUsGFDde7cWatWrXJ53Z5SbcPqoq655hq9+OKLVnA9evRoNWzY0O6yAAAAAAAAADhhVPNXRfXr1089e/a0xo899pjGjx+vkydPOsxbv369+vfvr02bNlnvTZo0SUFBQcX2HD16tOLj45WZmamdO3dqxIgRLn/woaf42F2Aq11zzTW65ppr9NJLL2nDhg1asGCB3SUBAAAAAAAAgCTpww8/VP/+/bV7925J0ltvvaXp06crNjZWISEhOnTokI4cOeKwZvz48brtttuc7rd161aHcXp6uvbu3evQcqS6uCxOVpfkuuuu00svvWR3GQAAAAAAAAAgSQoNDdXixYs1dOhQ672cnBzt2rVLCQkJDkF1SEiI3nnnHY0dO7bE/dq2beswDg4OVmxsrMvr9oTLOqwGAAAAAAAAgKomPDxcH374oZYtW6ZRo0apZcuWCgsLk5+fn6KiotSlSxdNnDhRmzdv1vDhwy+519tvv63u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+0779u01ffp0q69duHBBK1as0FdffaWIiAhJ0m+//aaBAwfql19+ycsw85VXX31Vp06d0po1a1SxYkVNnjyZnxvnsYiICA0YMMBIQvj4+GjChAl67LHH5Op657vn6OhoTZgwQTNnzpQk/fXXXxo5cqS+//57p8UNAMg+rlnsxzVL/pCQkKAZM2Zo4sSJxi+9PD09FR8f7+TIAAD5HSurASCNsmXLaujQodq6das6dOhg9K9evVpz5851YmTO5eHhoR9++EEREREKDQ3VAw884OyQ7jsffPCBoqOjJd252Vu5cqV69+5tJKolqVSpUvr00081ZswYo2/JkiXauHFjnscLAMhdXLNYxzVL/tC7d299+OGHRqL6gQce0H//+18nRwUAuBeQrAYAK4oXL65Zs2apfPnyRt+XX37pxIhwPzt+/LipFul//vMf1ahRI8Pxr732mpo0aWK0P/nkk1yNDwDgPFyzID9KSEiQJHl7e2v8+PFas2aNKlWq5NygAAD3BJLVAJABT09PvfDCC0b71KlTFg/tAfLCzz//rJSUFElS6dKlNXDgwEzHu7q66pVXXjHaW7du1cmTJ3MzRACAE3HNgvymUqVKeuedd7Rnzx4NGzZMbm5uzg4JAHCPIFkNAJl49NFHTe0DBw44KRLcz1avXm1s9+nTRwUKFMhyn06dOsnHx8dor1q1KldiAwDkD1yzID/56aef9MYbb8jb29vZoQAA7jE8YBEAMuHn52dqX7x40eZ9z58/ry1btigiIkKFChVSYGCgWrVqZaoxnFZKSop27NihkydPKjo6Wq6uripRooTq1q2r+vXrZ2tFSmxsrLZs2aLIyEjFx8fL19dXtWvXVuPGje2eKyeioqK0Y8cORUdHKyYmRoULF5afn58aNWqkKlWq5Prxk5KStG3bNp09e1bR0dEqWLCgfHx8FBgYqDp16mTrwUtRUVHavn27oqKilJiYKD8/P9WvX1916tRxaOyRkZE6dOiQ0W7Tpo1N+xUoUEDNmzfXihUrJElr167ViBEjHBobACD/4JrFMbhmAQDAuUhWA0Am3N3N/28yNTXV1B4/frw+/fRTSZKbm5uuXLmi6OhojR49WiEhIUbphrtCQkLUunVrU9/Fixc1YcIELV68WLGxsVbj8PT01JAhQzRq1CjTatmMnD59Wu+++65WrVqlmzdvWrxepUoVjRkzRr17985yrrvSroyZNm2a+vfvn+n4mzdvat68efr2229Nydb0atWqpaFDh+qZZ57R/PnzM0yozp8/X/Pnz7fo37t3rypWrGh1n1OnTmn8+PFasWKFUTsxvTJlyuiFF17QCy+8oGLFimX6nu4e7/3339fGjRstPl9Jql+/vj788EO1bds2y7lscfjwYVP7wQcftHnfpk2bGsnq9PMAAP5ZuGb5H65Z/ne8vLxmAQDAESgDAgCZuHTpkqnt6+ub6fjTp0+rTZs2+vXXX63eFKS3ZMkSNW7cWN99912GN32SFB8fr0mTJqlNmzbatWtXpnMuWrRIrVq10vLly63e9ElSeHi4hgwZoueff96mOO21d+9eNW3aVK+++mqmN32SdOTIEb3++usaMGCAQ2OYOnWqmjZtqoULF2Z40yfdufH+4IMP1KFDhyzrOk+ZMkUdOnTQunXrMjxv+/btU8+ePfX+++/nKP67Tpw4YWx7e3urVKlSNu9brVo1YzsyMjLT8wAAuLdxzZI9XLM47poFAABHYGU1AGQiLCzM1K5evXqm459//nlduHBBLi4u6tWrl7p166aSJUvq/PnzWrZsmYoUKWKM/fbbb/Xmm2/q9u3bkqQiRYqoZ8+eatOmjcqVK6dbt27p9OnTWrNmjdasWaPbt2/r/Pnzevzxx7V+/XpVrlzZ4vjLly/Xiy++aNyUuLi4qHPnzuratavKly+vhIQE7dq1S/PmzdPFixe1cOFCbdq0KaenyWTt2rUaMGCAEhMTjb6yZcuqZ8+eaty4sXx9ffX3338rMjJSYWFhWr58uRISEnTmzBn5+/ubVvfs2bNHcXFxku78vLlmzZoWx0t7Tu969913NXnyZKPt5eWlxx9/XC1btpSvr6+SkpJ0/Phx/fbbb9qyZYukOzegvXv31vr161WyZEmLOadPn66xY8cabXd3d/Xq1UuPPPKI/Pz8FBcXp9DQUM2fP1/x8fH68ssv5e/vn40zaBYeHm5slytXzq59048PDw9XYGBgjmMCAOQ/XLPYj2sWx16zAADgCC6xsbG3nR0EAOS2oKAghYaGSpL69u2r6dOn27TfY489pg0bNkiSSpYsqePHj5vqMKb9Se1dnp6emjdvnsVPZ9PaunWrunfvrlu3bkmSOnbsqClTpljUm7wrNDRU/fv3N1YytWrVyijvcNelS5fUpEkTxcfHG3H89NNPVmscX7t2TaNGjdKvv/5q8VpGq6Vs+UntqVOn1K5dO+NmzcXFRa+//rpGjx6twoULW503NjZW7733nnbt2mVxE5qdz23JkiV69tlnjXbfvn31ySefyMvLy+r44OBgPf/880pKSsrwOIcOHVKbNm2Mz6tcuXJasGCB1cTvpUuX9Mwzzxhx31W+fHnt378/y/jTe+GFF/TLL79Ikjp06KAlS5bYvG9UVJRq1apltK39pBsAkL9wzWLGNcv/5PdrFlvYW6IFAHD/oQwIAGTg559/Nm76JOnpp5+26YFB33//faY3fampqXrllVeMm4jOnTtrwYIFGd70SXdu9GbOnGm0Q0NDtWPHDtOYcePGGTd9Li4u+vHHHzN8GF/x4sX1ww8/qEOHDlm+H3u8+eabxk2fJH3xxRcaM2ZMhjd90p2blkmTJmnixIk5Pv7169f1xhtvGO1nn31W06dPz/CmT5J69uypjz76yGgvWrRI58+fN40ZM2aM8XkVLlxYS5cuzXCFsq+vrxYvXqx69erl5K0Y0q72srYiKzPpz3vauQAA/xxcs9iPaxbHX7MAAOAIJKsBIJ2UlBTNmDFDo0aNMvp8fX01evToLPcNCgpSx44dMx0TEhKio0ePSpI8PDw0depUm24oO3XqpEqVKhnt1atXG9uJiYlavHix0e7du3eWD8txdXXVF198oQIFCmR5bFvs2bNHf/zxh9Hu2bOnnnnmGZv3b9q0aY5jmDVrlmJiYiRJAQEBGjdunE37DRw4UEWLFpUk3bp1S2vXrjVeO3v2rNavX2+0hw0bZvWnvWkVKVJEn3/+ub3hW5U2wZzZDXRGcWQ0FwDg3sc1S/ZwzfI/jrxmAQDAEUhWA7jvJSYm6vz589q4caPGjx+vZs2a6a233jJqKBYvXlzz58+Xp6dnlnOl/SlnRtLeoPXp08euB+alXRmzfft2Y/uPP/7Q9evXjfagQYNsmq9ixYpq3769zcfPzKJFi0ztt956yyHz2iPtuR0yZIgKFSpk036FChUy1fZMe26Dg4ONGp2S7ee2efPmphIc2ZX2gVO2JAjSSn9T//fff+c4HgCA83DNwjVLfr5mAQDAEXjAIoD7zvz58zV//nybxlarVk3ffPONGjdunOVYNzc3tWjRItMxqamp2rx5s9EODQ1Vz549bYpFkrG6SZIuX75sbP/111/GduHChdWqVSub52zSpInWrFlj8/iM/Pe//zW2AwMDVbt27RzPaY+rV6+a6isuW7ZMGzdutHn/06dPG9sZndsqVaqYVoplpUmTJjpy5IjN461xd//f/1SnTVzbIn1y2lEr0gAAeYNrFjOuWe7Ir9csAAA4AslqALCiUqVKGjJkiIYOHWpzneASJUpkOTYqKkpXr1412sePH9fx48ezFWPaOosHDx40tmvUqGHXClwfH59sHT+9tDc4zZs3d8ic9jh69KhSU1ONdk4eDJTRua1Tp45d8zji3N79qa9k/8ro9OPtrXkNAMj/uGaxH9cslhx1bgEAyCmS1QDuO6VLlzZdwLu7u8vT01MlS5ZU7dq11aRJEzVo0EAuLi52zWvLDWJ0dLTd8Wbk7sNz0s/r6+tr1zz2vk9r4uLilJycbLQDAgJyPKe9/qnn1tvb29i+du2aXfvefXjVXSVKlMhxPACAvMM1ixnXLJby07kFAMARSFYDuO+0aNFCc+fOdcqxb9y4YWpPnjxZAwcOzPG8aZOYxYoVy/F89kr/4D5nrOBNf26Dg4OzfGCTLZx9bv39/Y3t8+fP27VvREREhnMBAPI/rlkcj2sWAADyNx6wCAB5KO0qWcly5Wt2pa1FbG+piLQP4skuLy8vUzs2NjbHc9or/blN+7PYnHD2uU1bb/LChQumnw1nJW2y2t3dXeXKlctxPACA+wPXLLnnn3rNAgCAI5CsBoA8VKpUKVM7/crX7Ep702PvT0vT1qPMrqJFi5pqK584cSLHc9rrn3pu69WrZ2wnJSXp8OHDNu+7e/duY7t69eoqWLBgjuMBANwf/qn/u8o1i3WOOLcAADgCyWoAyEM+Pj6qWLGi0Q4LC3PIvJUrVza2Dx06ZKpfmJW0D+PJiQYNGhjbW7ZsyfMVOnXq1DH9lDc3zu3evXvt2tcR5zYwMNBUa3rbtm0275t2bLNmzXIcCwDg/sE1S+75p16zAADgCCSrASCPtWvXztjevXu3XStlM9KoUSNj+8aNG1q7dq1N+yUkJGj9+vU5Pr4ktW/f3tiOiIjQmjVrHDKvrQoVKqTmzZsb7TVr1ujKlSs5njftuQ0PD7f584qIiNCePXtyfHw3Nzd17NjRaC9evNim/Y4cOWK6UU07BwAAtuCaJXf8U69ZAABwBJLVAJDHnnnmGVN77Nixdq/oSfsAHUnq3LmzXF3/9//SJ02aZNOc06dPd1itxieffNJUZuKdd96xeIhRZm7evGnRl/bJ9LbUak57bm/cuKEPP/zQ5uPflf7cdu3a1dT+8ssvbZrns88+U0pKit3Ht+bxxx83trdu3aodO3Zkuc9XX31lbPv4+JCsBgDYjWsW67hmAQAg95CsBoA81rBhQ3Xv3t1o//nnn3rzzTdtuklITk7WxIkT1alTJ1N/hQoV9PDDDxvtrVu3asKECZnOtXr1an366ad2Rp+xihUratCgQUb7xIkT6tu3r00PZDp48KDFe5Jk+onsxYsXs5yne/fuatiwodGePXu2Jk2alOV+knT9+nX9+9//trgxb9mypWrWrGm0Fy5cqAULFmQ61+zZszV37lybjmuLTp06qXHjxkb7xRdfzPSGPTg4WPPnzzfaI0eOpF41AMBuXLNY4poFAIDcRbIaAJzgq6++UoUKFYz2t99+q44dO2rVqlVWV+ucOHFCn3/+uRo1aqQPP/xQN27csBjz0UcfmRKS48aN00svvaSoqCjTuKioKI0dO1b9+/dXcnKyA9+V9P7775tuvDZu3KgWLVpo1qxZVn/eevr0aY0dO1YdOnTQyZMnLV4PCAgwtjdv3qw1a9YYMZ87d04zZsxQnz59jDEuLi764Ycf5OXlZfS999576tWrlzZv3mxxc52amqoDBw7ovffeU8OGDfX1119bPSfpb5BHjBihDz74wCJhfPr0aY0YMUKvvPKK5cnJoQ8//FBubm6SpJMnT+rhhx/Whg0bTGPi4uL0+eefa8iQIUZfvXr1NHz4cIfHAwC4P3DNcgfXLAAA5A2X2NjYvH2aBAA4QVBQkEJDQyVJPXr0cNgKkvHjxxs3BeXLl9f+/ftt3vfYsWN66qmnFB4ebuovWrSoqlSpIi8vL127dk0RERGKiYkxjalZs6bVh/HMmzdPo0aNMv381NXVVTVr1pS3t7euXLmi48ePGz+39fX1VevWrbVkyRJjfEYrdtM+YX7atGnq37+/1XGXLl3SgAEDLOJzdXVVpUqVVLp0ad2+fVsXLlxQRESE8XqJEiV06tQp0z4rVqywOI6Li4tcXV2NmzhPT0+dPXvWNCYsLExPP/20Ll++bOr39PRUpUqVVLx4ccXFxens2bMWq6g6duyoRYsWWbyvTz/9VOPHjzf1FShQQLVq1ZKHh4eioqJM8deqVUv+/v5GfU17/z6smT17tsVNpa+vrypVqqSEhASFh4ebkgIBAQH6448/5O/vn6PjAgDyDtcsXLPcHXsvX7NkxNbPBgBw/2JlNQA4SY0aNbRu3ToNHDhQBQoUMPoTExN14MABhYaGat++fRY3fUFBQaYbtbT69++vuXPnys/Pz+hLTU3V4cOHtXXrVh07dsy46QsICNCyZctUunRph74vX19frVixQmPGjFGJEiVMcYSHhyssLEzbt2833fRVqlTJ6s1Wly5d9Mgjj5j6bt++bVpt5O7ubrFfs2bNtGHDBvXo0cNUQzI+Pl779u1TaGioDhw4YLrpc3V11YABA/TNN99YfV//93//p0mTJsnT09PoS05O1v79+7V161bTTV+dOnW0ZMkS00+CHWHw4MGaM2eOSpUqZfRdunRJ27dv18GDB02J6k6dOpGoBgA4BNcsXLMAAJBXLP/XEgCQZ7y9vTV58mSNHj1av/76qzZu3Khjx44pJiZGN2/eVLFixVSqVCnVqFFDTZo0Ue/evVWpUqVM5+zWrZvatm2rxYsXa+XKlTpy5Iiio6N1+/Zt+fj4qG7dunrkkUfUt29feXh45Mr7cnd31+jRozVs2DAFBwdr8+bN2r17ty5fvqy4uDgVLlxYZcqUUaNGjRQUFKRu3bpZvYFzdXXVggULNHfuXC1btkyHDx9WbGys3N3dVb58ebVq1Uovvvii1RjKlSunuXPn6siRIwoODtamTZt0+vRpXblyRSkpKfLw8JCvr69q1qypZs2aqXfv3qYbZmsGDx6soKAgLVy4UKtXr1Z4eLiio6Pl5uamUqVKqWHDhurUqZP69OmTazWie/bsqbZt22rZsmUKCQnRiRMndOnSJRUqVEhly5ZV06ZN1adPH7Vu3TpXjg8AuD9xzcI1CwAAeYEyIAAAAAAAAAAAp6MMCAAAAAAAAADA6UhWAwAAAAAAAACcjmQ1AAAAAAAAAMDpSFYDAAAAAAAAAJyOZDUAAAAAAAAAwOlIVgMAAAAAAAAAnI5kNQAAAAAAAADA6UhWAwAAAAAAAACcjmQ1AAAAAAAAAMDpSFYDAAAAAAAAAJyOZDUAAAAAAAAAwOlIVgMAAAAAAAAAnI5kNQAAAAAAAADA6UhWAwAAAAAAAACcjmQ1AAAAAAAAAMDpSFYDAAAAAAAAAJyOZDUAAAAAAAAAwOlIVgMAAAAAAAAAnM7d2QEAAADA0vjx403tt99+20mRwJp58+bp7NmzRrtfv36qWLGiEyPKH86cOaOff/7ZaFeoUEH9+/d3YkQAAAC4l7jExsbednYQAAAAMPP29ja1Y2NjnRIHrAsKClJoaKjRDgkJUevWrZ0YUf6wadMmde/e3Wi3atVKK1ascGJEjsHnDQAAkDcoAwIAAAAAAAAAcDqS1QAAAPe46dOnKzAwUFWrVtUbb7yhv//+29khAQAAAIDdqFkNAAByJH25Cms8PDzk6ekpHx8f1alTR4GBgerYsaNq1qyZ+wH+wy1fvtxUz/rbb79VwYIF9fHHHzsxKmRX+nIT06ZNo+YzAAAA7husrAYAALnu+vXrunDhgvbv369ffvlFY8aMUbNmzdSqVSvNnTtXqampzg7xnvXrr79a9C1ZsiTvAwEAAACAHCJZDQAAnObgwYN66aWX1L59ex06dMjZ4dyTUlJSLPpu3brlhEgAAAAAIGcoAwIAABwqJCTE1E5NTVVCQoJiYmIUHh6usLAwbd++XcnJycaYvXv3qmvXrlqwYIGaN2+e1yHf07p3767g4GBT32OPPeacYCR9/fXXiouLM9rDhg2zqVQMAAAAAJCsBgAADtW6dessx1y5ckVfffWVvv76a2MVcGxsrJ544glt3bpV5cqVy+0w/zH69OmjyMhIzZgxQ4mJiXrsscf0wQcfOC2e6dOn69y5c0a7X79+JKsBAAAA2IQyIAAAIM/5+Pjogw8+0KJFi1S0aFGjPz4+Xi+//LITI7s3jRo1SgcPHtSpU6f05Zdfms4pAAAAANwrSFYDAACnad++vcaNG2fq+/PPP7Vt2zYnRQQAAAAAcBaS1QAAwKkGDx6sSpUqmfqWLFninGAAAAAAAE5DshoAADhd7969Te3t27c7KRIAAAAAgLPwgEUAAOB01apVM7VPnz6drXlOnz6tLVu2KDIyUpJUpkwZtWnTRhUqVMhy37i4OO3cuVNRUVG6fPmyChQoIB8fH1WuXFkPPPCA3N1zftl05swZ7d69WxEREUpKSlLp0qVVtmxZNW/eXB4eHjmeP6dSUlK0Z88enTt3TpcvX1ZcXJyKFy8uX19fNWjQQFWqVHFabMnJydq5c6ciIiJ08eJFpaSkqGTJkipbtqyaNWvmkPMXGxur7du3Kzw8XNevX5e3t7f8/Pz0wAMPyN/f3wHvIn+6fv268bnHxsYqISFBHh4e8vHxUf369VWjRg25uLg47Hi3bt3Szp07dejQIV29elXFihVTmTJlVL16ddWrV89hxzl37pz279+vS5cuKSYmxnhPdevWVa1atRx2HAAAADgOyWoAAOB0ZcqUMbUTEhIsxpw5c0YNGjQw9UVHR8vd3V179uzRO++8o9DQUIv9PD09dfbs2QyPHRwcrNmzZ2vz5s1KTk62OqZ48eLq3Lmz3njjDdWoUcOWt2RxjC+++EJ79+61+nqxYsUUFBSkf//73xYlUWwRGBioc+fOGe29e/eqYsWKNu8fGhqq77//XuvWrVNsbGyG4/z9/fXUU0/p2WefVUBAgDZt2qTu3btnOnf6z+yuVq1aacWKFVnGtnfvXk2ZMkVr1qxRfHy81TEFChRQ8+bN9eqrr+rhhx/Ocs709uzZo08++UR//PGHUlJSLF53dXVVmzZt9Prrr6t169Z2z58fnTp1SosWLVJwcLAOHz6s1NTUDMf6+fnp2Wef1ciRI1WkSJFsHzMpKUmTJk3SN998oytXrlgdU7lyZfXr10+jRo1S4cKFs3WMb7/9VgsXLtS+ffsyHHf3b/mll15SiRIl7D4OAAAAcgdlQAAAgNMlJiaa2p6enjbvO2vWLHXq1MlqojozR48eVZcuXTRo0CCtX78+w0S1JF27dk2LFi1SixYt9OGHH+r27ds2HSMmJkaDBg3SoEGDMkxUS3eS8wsXLlTLli31ww8/2PU+cuL48ePq3bu3goKCtHTp0kwT1ZIUGRmpL7/8Us2aNcv1OOPi4jRixAi1b99eixcvzjBRLd1Zdb1p0yb17t1bTz75ZKZj07p165Y++eQTPfLII1q1apXVRLUkpaamasOGDerRo4deffXVTP9W8rvDhw9rwIABatSokcaNG6eDBw9mmqiWpKioKH388cfq0KGDzp8/n63jnjt3Tp07d9b48eMzTFRLd5LoH3/8sVq0aKFdu3bZdYyVK1fqwQcf1JgxYzJNVEv/+1tu0KCBli9fbtdxAAAAkHtYWQ0AAJzu8uXLpravr69N+61Zs0avvvqqqa9ixYry9fXVpUuXTKuN0woNDVW/fv0UFxdn8VqFChXk5+enxMREnT171pT4TElJ0cSJE3Xq1Cl9//33mZZGuHr1qoKCgnT48GGL13x9fVWuXDklJyebjpGYmKjXXntN165ds+n958SGDRs0aNAgq+egaNGi8vPzU6lSpXT9+nVFRUUpJibGeD0hIUE//PCDxo8fnyuxXbhwQX369NGhQ4csXitVqpTKly8v6U7CMSoqyvT66tWr1alTJ4WEhKhUqVIZHuP27dsaNmyYFi1aZPGap6enAgICVKRIEZ07d06XLl0y9pk1a5YuXryoW7du5eQtOk3btm118+ZNi/4CBQrIz89Pvr6+cnFx0cWLFy3++zl06JAGDx6slStX2lUW59KlS+rYsaPps3J3d1eFChVUsmRJRUVFKSIiwrTPqVOn1Lt3by1fvjzD1flpTZ8+Xf/+978tvkhyd3dXlSpVVKJECcXHx+vkyZOm9x8fH69Bgwbps88+09ChQ21+TwAAAMgdJKsBAIDThYWFmdqVK1e2ab9Ro0YZ20FBQRo7dqypFu3Zs2e1bNky0z67du1S7969lZSUZPR5eHjoxRdf1KBBg4xEqHRnRe22bdv02WefacOGDUb/0qVLVb9+fb3yyitW40pOTtYTTzxhkah+4oknNGLECFPyLTk5WWvWrNHHH39sJGf/85//2PT+s2vDhg3q06ePRcK1Y8eOeu6559ShQweLZOTJkye1YsUKzZw501hdGxgYqJCQENO4Z5991kjuStL3339v9csHLy8vq7HFxsaqS5cuOnPmjNHn4uKif/3rXxo+fLgaNmxoGn/8+HFNnz5ds2fPNlYIHz58WMOHD9cvv/yS4RcKY8eOtUhUN27cWO+8847atm1rev+7du3ShAkTtGrVKknS77//bnXOe0Ha1eMFCxZUnz591LNnT7Vu3VpFixY1jY2IiNCECRM0Z84co2/Hjh1avny5xUNRM5Kamqrnn3/eSFQXK1ZMo0eP1oABA0xfJhw9elSffvqpli5davTFxcWpf//+2r59u0Vsac2YMUNvv/22qa98+fIaPXq0evbsKW9vb6M/MTFRq1at0rhx43TixAlJd76EePvttxUYGKjmzZvb9L4AAACQO1xiY2Nt+x0rAACAFWkTQZKyLCWR3o0bN1SrVi3TCt/Jkydr4MCBpnHWalbfNWbMGI0ePTrLY127dk1t2rTRqVOnjL7atWtr3rx5mT488Pbt2/roo480ceJEo8/d3V07duywmlifOnWqxowZY7RdXFz09ddfq2/fvhke49atW3r55Zc1b948q69ndl7tqVl98eJFtW7d2pRQLly4sKZMmaJ//etfGR7jrqSkJP373//W9u3btWnTphzFYs3gwYP166+/Gm1PT0/98MMPeuSRRzLdb9WqVRowYICpRMf06dOtnvPdu3fr4YcfNq3CfeaZZ/T555/Lzc0tw2PMmTNHr732mtVyISEhIQ6pZx0UFGQqaTNt2jT1798/x/Pe5ePjo9TUVA0YMED/93//p3LlymW5z3PPPafFixcb7fbt21t8CXRX+jrmLi4uxnmuVq2aFi9enGld9gkTJujjjz829b3++usaO3as1fF79+5Vx44dTaule/Tooa+//jrTh25ev35dAwYM0Pr1642+KlWqaOfOnXJ1tayUmP5zcdTnDQAAADNqVgMAAKf69NNPTYnqggULqkuXLjbv369fP5sS1ZI0fvx4U6I6ICBAy5YtyzRRLd1JuI0dO1adOnUy+m7duqUZM2ZYjI2JidFnn31m6hs7dmymiWrpTvJ72rRp6tq1qy1vJdveeustU6La3d1dc+bMsSlRLUmFChXSxIkTNWXKFIfH9vvvv5sS1QUKFNDPP/+cZaJakjp37qx3333X1Ddt2jSrY99++21TovqRRx7RxIkTM01US9KgQYP0wQcfZBlLflanTh2FhIRo8uTJNiWqJVn8gmDXrl02122/O65s2bJasWJFlg8QfeONNywe2vntt9+afgmR1ksvvWRKVHfs2FE//PBDpolq6c6vKWbNmqWyZcsafeHh4TY99BMAAAC5h2Q1AABwmiVLlmjq1KmmvuHDh6t06dI27e/p6alx48bZNDY2NlZz58419X311Vfy8/OzLVjJotTA/PnzLVbZpn8YYPXq1U3lSrIyefJkFStWzObx9ggPD1dwcLCpb+TIkaYkvK3Sl+NwhK+++srUHjlypB566CGb9x86dKiptMSBAwe0e/du05jDhw9r27ZtRrtgwYL67LPPrK6mtWbEiBFq0qSJzTHlN5s2bbLrnEpSvXr1TGVb4uPjM6wHn5GpU6eqTJkyNo396KOPTGVY4uPjtXr1aotx69evNz241MvLS9OmTbO5nra3t7eGDRtm6vvpp59s2hcAAAC5g2Q1AADIc7GxsRozZoyee+45U93kChUq2LxKWpIGDhxoUYYkI3PnztX169eNdosWLdShQwebjyXdSdCmTW7Hx8dbPAQwbbkESXr++edVoEAB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\n"},"metadata":{"image/png":{"width":725,"height":592}}}],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# 예시 데이터 (실제 데이터로 교체하세요)\n","actual = y_te\n","predict = y_pred  # 예측값\n","\n","# 임계값 설정\n","threshold = 0.5\n","predict_binary = (predict >= threshold).astype(int)\n","\n","# Confusion Matrix 계산\n","cm = confusion_matrix(actual, predict_binary, normalize=\"true\")\n","\n","# Confusion Matrix 출력\n","print(\"Confusion Matrix:\")\n","print(cm)\n","\n","# 시각화\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, cmap=\"Blues\", xticklabels=[\"Predicted 0\", \"Predicted 1\"], yticklabels=[\"Actual 0\", \"Actual 1\"])\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Label\")\n","plt.ylabel(\"Actual Label\")\n","plt.show()\n"]}],"metadata":{"colab":{"collapsed_sections":["vpsOAPWLUTnq","fZzXY9Z9UtEq","lnWjgSKSU_v6","A6vblT6FV9AL","bBHKc63d2Waj"],"provenance":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}